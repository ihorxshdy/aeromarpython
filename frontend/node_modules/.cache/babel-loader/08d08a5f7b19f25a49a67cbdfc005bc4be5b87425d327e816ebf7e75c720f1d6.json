{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const flightAPI = {\n  // Получить все рейсы\n  getFlights: async () => {\n    const response = await api.get('/flights');\n    return response.data;\n  },\n  // Добавить рейсы\n  addFlights: async flights => {\n    const response = await api.post('/flights', flights);\n    return response.data;\n  },\n  // Импорт из CSV\n  importCSV: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/flights/import-csv', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Обновить рейс\n  updateFlight: async (flightId, flight) => {\n    const response = await api.put(`/flights/${flightId}`, flight);\n    return response.data;\n  },\n  // Удалить рейс\n  deleteFlight: async flightId => {\n    await api.delete(`/flights/${flightId}`);\n  },\n  // Автоназначение\n  autoAssign: async () => {\n    const response = await api.post('/assign/auto');\n    return response.data;\n  },\n  // Сброс назначений\n  resetAssignments: async () => {\n    const response = await api.post('/assign/reset');\n    return response.data;\n  },\n  // Назначить рейс на машину\n  assignFlight: async (flightId, machineId) => {\n    const response = await api.post(`/assign/flight/${flightId}/machine/${machineId}`);\n    return response.data;\n  },\n  // Снять назначение рейса\n  unassignFlight: async flightId => {\n    const response = await api.delete(`/assign/flight/${flightId}`);\n    return response.data;\n  }\n};\nexport const machineAPI = {\n  // Получить все машины\n  getMachines: async () => {\n    const response = await api.get('/machines');\n    return response.data;\n  },\n  // Обновить водителя машины\n  updateDriver: async (machineId, driverName) => {\n    const response = await api.put(`/machines/${machineId}/driver`, {\n      driver: driverName\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","flightAPI","getFlights","response","get","data","addFlights","flights","post","importCSV","file","formData","FormData","append","updateFlight","flightId","flight","put","deleteFlight","delete","autoAssign","resetAssignments","assignFlight","machineId","unassignFlight","machineAPI","getMachines","updateDriver","driverName","driver"],"sources":["/Users/igordvoretskii/Documents/aeromar-python/frontend/src/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Flight, Machine } from './types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const flightAPI = {\n  // Получить все рейсы\n  getFlights: async (): Promise<Flight[]> => {\n    const response = await api.get('/flights');\n    return response.data;\n  },\n\n  // Добавить рейсы\n  addFlights: async (flights: Flight[]): Promise<Flight[]> => {\n    const response = await api.post('/flights', flights);\n    return response.data;\n  },\n\n  // Импорт из CSV\n  importCSV: async (file: File): Promise<Flight[]> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/flights/import-csv', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Обновить рейс\n  updateFlight: async (flightId: string, flight: Flight): Promise<Flight> => {\n    const response = await api.put(`/flights/${flightId}`, flight);\n    return response.data;\n  },\n\n  // Удалить рейс\n  deleteFlight: async (flightId: string): Promise<void> => {\n    await api.delete(`/flights/${flightId}`);\n  },\n\n  // Автоназначение\n  autoAssign: async (): Promise<{ message: string; assigned_count: number }> => {\n    const response = await api.post('/assign/auto');\n    return response.data;\n  },\n\n  // Сброс назначений\n  resetAssignments: async (): Promise<{ message: string }> => {\n    const response = await api.post('/assign/reset');\n    return response.data;\n  },\n\n  // Назначить рейс на машину\n  assignFlight: async (flightId: string, machineId: string): Promise<Flight> => {\n    const response = await api.post(`/assign/flight/${flightId}/machine/${machineId}`);\n    return response.data;\n  },\n\n  // Снять назначение рейса\n  unassignFlight: async (flightId: string): Promise<Flight> => {\n    const response = await api.delete(`/assign/flight/${flightId}`);\n    return response.data;\n  },\n};\n\nexport const machineAPI = {\n  // Получить все машины\n  getMachines: async (): Promise<Machine[]> => {\n    const response = await api.get('/machines');\n    return response.data;\n  },\n\n  // Обновить водителя машины\n  updateDriver: async (machineId: string, driverName: string): Promise<Machine> => {\n    const response = await api.put(`/machines/${machineId}/driver`, { driver: driverName });\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}