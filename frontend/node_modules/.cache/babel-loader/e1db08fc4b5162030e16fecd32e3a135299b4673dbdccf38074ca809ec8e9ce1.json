{"ast":null,"code":"// Константы\nexport const DAY_START = 0; // начинаем ось с 00:00\nexport const DAY_END = 24 * 60; // до 24:00\nexport const GRID_STEP = 30; // шаг сетки 30 мин (было 60) для более детального отображения\nexport const FLEX_HOURS = 9; // длительность flex-смены (ч)\n\nexport const RULE = {\n  // derivation из STD\n  LOAD_SMS: 180,\n  // начало загрузки автолифта до STD (SMS)\n  LOAD_DMS: 240,\n  // для DMS\n  WINDOW_TO_SERVICE: 15,\n  // от окна до начала обслуживания\n  SERVICE_SMS: 19,\n  // длительность обслуживания SMS\n  SERVICE_DMS: 45,\n  // длительность обслуживания DMS\n  LEAVE_BEFORE_STD: 60,\n  // отъезд от ВС до STD\n  RETURN_UNLOAD: 20,\n  // возврат в окно после обслуживания (20 мин)\n  TRAVEL: 20,\n  // переезд между бортами\n\n  // визуал «скобки»\n  BRACKET_PAD_LEFT: 120,\n  // −2:00 от первого бара в цепочке\n  BRACKET_PAD_RIGHT: 0,\n  // без дополнительного хвоста — скобка заканчивается по разгрузке\n\n  // подсказка-буфер при dnd\n  RED_ZONE: 15 // 15 минут\n};\n\n// Утилиты\nexport const uid = () => Math.random().toString(36).slice(2, 9);\nexport const clamp = (v, a, b) => Math.max(a, Math.min(b, v));\nexport const clampDay = m => clamp(m, DAY_START, DAY_END);\nexport function toHHMM(m) {\n  m = Math.round((m % (24 * 60) + 24 * 60) % (24 * 60));\n  const h = Math.floor(m / 60).toString().padStart(2, '0');\n  const mm = (m % 60).toString().padStart(2, '0');\n  return `${h}:${mm}`;\n}\n\n// Функция для компактного отображения времени\nexport function toCompactTime(start, end, width) {\n  if (width >= 90) {\n    // Полное время с пробелами для широких баров\n    return `${toHHMM(start)} - ${toHHMM(end)}`;\n  } else if (width >= 65) {\n    // Без пробелов для средних баров\n    return `${toHHMM(start)}-${toHHMM(end)}`;\n  } else if (width >= 50) {\n    // Сокращенное время без ведущих нулей\n    const shortStart = toHHMM(start).replace(/^0/, '');\n    const shortEnd = toHHMM(end).replace(/^0/, '');\n    return `${shortStart}-${shortEnd}`;\n  } else {\n    // Только время начала для очень узких баров\n    return toHHMM(start).replace(/^0/, '');\n  }\n}\nexport function toMin(hhmm) {\n  const match = hhmm.match(/(\\d{1,2}):(\\d{2})/);\n  if (!match) return NaN;\n  return +match[1] * 60 + +match[2];\n}\nexport const DMS_TYPES = new Set(['77W', '77R', '773', '744', '333', '359']);\nexport const SMS_TYPES = new Set(['320', '321', '32A', '32B', '32N', '32Q', '73H', '739', 'SU9']);\nexport const isDMS = t => DMS_TYPES.has(t.toUpperCase());\nexport const isSMS = t => SMS_TYPES.has(t.toUpperCase());\nexport const normType = t => t.toUpperCase().trim();","map":{"version":3,"names":["DAY_START","DAY_END","GRID_STEP","FLEX_HOURS","RULE","LOAD_SMS","LOAD_DMS","WINDOW_TO_SERVICE","SERVICE_SMS","SERVICE_DMS","LEAVE_BEFORE_STD","RETURN_UNLOAD","TRAVEL","BRACKET_PAD_LEFT","BRACKET_PAD_RIGHT","RED_ZONE","uid","Math","random","toString","slice","clamp","v","a","b","max","min","clampDay","m","toHHMM","round","h","floor","padStart","mm","toCompactTime","start","end","width","shortStart","replace","shortEnd","toMin","hhmm","match","NaN","DMS_TYPES","Set","SMS_TYPES","isDMS","t","has","toUpperCase","isSMS","normType","trim"],"sources":["/Users/igordvoretskii/Documents/aeromar-python/frontend/src/utils.ts"],"sourcesContent":["// Константы\nexport const DAY_START = 0;            // начинаем ось с 00:00\nexport const DAY_END = 24 * 60;        // до 24:00\nexport const GRID_STEP = 30;           // шаг сетки 30 мин (было 60) для более детального отображения\nexport const FLEX_HOURS = 9;           // длительность flex-смены (ч)\n\nexport const RULE = {\n  // derivation из STD\n  LOAD_SMS: 180,                // начало загрузки автолифта до STD (SMS)\n  LOAD_DMS: 240,                // для DMS\n  WINDOW_TO_SERVICE: 15,        // от окна до начала обслуживания\n  SERVICE_SMS: 19,              // длительность обслуживания SMS\n  SERVICE_DMS: 45,              // длительность обслуживания DMS\n  LEAVE_BEFORE_STD: 60,         // отъезд от ВС до STD\n  RETURN_UNLOAD: 20,            // возврат в окно после обслуживания (20 мин)\n  TRAVEL: 20,                   // переезд между бортами\n\n  // визуал «скобки»\n  BRACKET_PAD_LEFT: 120,        // −2:00 от первого бара в цепочке\n  BRACKET_PAD_RIGHT: 0,         // без дополнительного хвоста — скобка заканчивается по разгрузке\n\n  // подсказка-буфер при dnd\n  RED_ZONE: 15,                 // 15 минут\n} as const;\n\n// Утилиты\nexport const uid = () => Math.random().toString(36).slice(2, 9);\nexport const clamp = (v: number, a: number, b: number) => Math.max(a, Math.min(b, v));\nexport const clampDay = (m: number) => clamp(m, DAY_START, DAY_END);\n\nexport function toHHMM(m: number): string {\n  m = Math.round(((m % (24*60)) + 24*60) % (24*60));\n  const h = Math.floor(m/60).toString().padStart(2,'0');\n  const mm = (m%60).toString().padStart(2,'0');\n  return `${h}:${mm}`;\n}\n\n// Функция для компактного отображения времени\nexport function toCompactTime(start: number, end: number, width: number): string {\n  if (width >= 90) {\n    // Полное время с пробелами для широких баров\n    return `${toHHMM(start)} - ${toHHMM(end)}`;\n  } else if (width >= 65) {\n    // Без пробелов для средних баров\n    return `${toHHMM(start)}-${toHHMM(end)}`;\n  } else if (width >= 50) {\n    // Сокращенное время без ведущих нулей\n    const shortStart = toHHMM(start).replace(/^0/, '');\n    const shortEnd = toHHMM(end).replace(/^0/, '');\n    return `${shortStart}-${shortEnd}`;\n  } else {\n    // Только время начала для очень узких баров\n    return toHHMM(start).replace(/^0/, '');\n  }\n}\n\nexport function toMin(hhmm: string): number {\n  const match = hhmm.match(/(\\d{1,2}):(\\d{2})/);\n  if (!match) return NaN;\n  return +match[1]*60 + +match[2];\n}\n\nexport const DMS_TYPES = new Set(['77W','77R','773','744','333','359']);\nexport const SMS_TYPES = new Set(['320','321','32A','32B','32N','32Q','73H','739','SU9']);\nexport const isDMS = (t: string) => DMS_TYPES.has(t.toUpperCase());\nexport const isSMS = (t: string) => SMS_TYPES.has(t.toUpperCase());\nexport const normType = (t: string) => t.toUpperCase().trim();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}