import axios from 'axios';
import { Flight, Machine, Driver } from './types';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';
const CACHE_DURATION = parseInt(process.env.REACT_APP_CACHE_DURATION || '300000'); // 5 –º–∏–Ω—É—Ç

// –ö–µ—à –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
interface CacheEntry<T> {
  data: T;
  timestamp: number;
}

class APICache {
  private cache = new Map<string, CacheEntry<any>>();

  set<T>(key: string, data: T): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  get<T>(key: string): T | null {
    const entry = this.cache.get(key);
    if (!entry) return null;

    const isExpired = Date.now() - entry.timestamp > CACHE_DURATION;
    if (isExpired) {
      this.cache.delete(key);
      return null;
    }

    return entry.data;
  }

  clear(): void {
    this.cache.clear();
  }

  invalidate(pattern: string): void {
    const keysToDelete: string[] = [];
    this.cache.forEach((_, key) => {
      if (key.includes(pattern)) {
        keysToDelete.push(key);
      }
    });
    keysToDelete.forEach(key => this.cache.delete(key));
  }
}

const apiCache = new APICache();

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
api.interceptors.request.use(
  (config) => {
    if (process.env.REACT_APP_DEBUG === 'true') {
      console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => {
    if (process.env.REACT_APP_DEBUG === 'true') {
      console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`);
    }
    return response;
  },
  (error) => {
    console.error('‚ùå API Response Error:', error);
    return Promise.reject(error);
  }
);

export const flightAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  getFlights: async (): Promise<Flight[]> => {
    const cacheKey = 'flights';
    const cached = apiCache.get<Flight[]>(cacheKey);
    if (cached) {
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–µ–π—Å–æ–≤');
      return cached;
    }

    const response = await api.get('/flights');
    const data = response.data;
    apiCache.set(cacheKey, data);
    return data;
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å—ã (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞)
  addFlights: async (flights: Flight[]): Promise<Flight[]> => {
    const response = await api.post('/flights', flights);
    apiCache.invalidate('flights'); // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ä–µ–π—Å–æ–≤
    return response.data;
  },

  // –ò–º–ø–æ—Ä—Ç –∏–∑ CSV
  importCSV: async (file: File): Promise<Flight[]> => {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await api.post('/flights/import-csv', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Å
  updateFlight: async (flightId: string, flight: Flight): Promise<Flight> => {
    const response = await api.put(`/flights/${flightId}`, flight);
    return response.data;
  },

  // –£–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å
  deleteFlight: async (flightId: string): Promise<void> => {
    await api.delete(`/flights/${flightId}`);
  },

  // –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ–±–æ–∫ (–Ω–æ–≤–æ–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
  createBracketSchedule: async (): Promise<Flight[]> => {
    const response = await api.post('/brackets/create-schedule');
    return response.data.flights || response.data;
  },

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
  planBracketsForFlights: async (flightIds: string[]): Promise<Flight[]> => {
    const response = await api.post('/brackets/plan-for-flights', flightIds);
    return response.data;
  },

  // –°–±—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  resetAssignments: async (): Promise<{ message: string }> => {
    const response = await api.post('/assign/reset');
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ–±–æ–∫
  getBracketRules: async (): Promise<any> => {
    const response = await api.get('/brackets/rules');
    return response.data;
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  validateBracketCombination: async (combinations: any): Promise<any> => {
    const response = await api.post('/brackets/validate-combination', combinations);
    return response.data;
  },

  // –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (—Å—Ç–∞—Ä–æ–µ, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  autoAssign: async (): Promise<{ message: string; assigned_count: number }> => {
    try {
      console.log('üîç autoAssign: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–∑–æ–≤ API');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ–±–æ–∫ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      const response = await api.post('/brackets/create-schedule');
      console.log('üîç autoAssign: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
      
      const responseData = response.data;
      console.log('üîç autoAssign: response.data:', responseData);
      console.log('üîç autoAssign: responseData.stats:', responseData.stats);
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏: assignments, brackets, message, stats, status, unassigned
      if (responseData && responseData.stats) {
        const result = { 
          message: responseData.message || '–°–∫–æ–±–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', 
          assigned_count: responseData.stats.assigned_flights || 0
        };
        console.log('üîç autoAssign: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        return result;
      } else {
        console.log('üîç autoAssign: –ù–µ—Ç –ø–æ–ª—è stats, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫');
        // –§–æ–ª–±—ç–∫ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        const result = { 
          message: responseData?.message || '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 
          assigned_count: responseData?.assigned_count || 0
        };
        console.log('üîç autoAssign: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–±—ç–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        return result;
      }
    } catch (error) {
      console.error('üîç autoAssign: –û—à–∏–±–∫–∞ –≤ autoAssign:', error);
      throw error;
    }
  },

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–π—Å –Ω–∞ –º–∞—à–∏–Ω—É
  assignFlight: async (flightId: string, machineId: string): Promise<Flight> => {
    const response = await api.post(`/assign/flight/${flightId}/machine/${machineId}`);
    return response.data;
  },

  // –°–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞
  unassignFlight: async (flightId: string): Promise<Flight> => {
    const response = await api.delete(`/assign/flight/${flightId}`);
    return response.data;
  },
};

export const machineAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã
  getMachines: async (): Promise<Machine[]> => {
    const response = await api.get('/machines');
    return response.data;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –º–∞—à–∏–Ω—ã
  updateDriver: async (machineId: string, driverName: string): Promise<Machine> => {
    const response = await api.put(`/machines/${machineId}/driver`, { driver: driverName });
    return response.data;
  },
};

export const driverAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
  getDrivers: async (): Promise<Driver[]> => {
    const response = await api.get('/drivers');
    return response.data;
  },
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ–Ω–∞–º–∏
export const shiftsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã
  getShifts: async () => {
    const response = await api.get('/shifts');
    return response.data;
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–º–µ–Ω—ã –∏–∑ CSV
  uploadShifts: async (file: File) => {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await api.post('/shifts/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω
  getShiftAssignments: async () => {
    const response = await api.get('/shift-assignments');
    return response.data;
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–º–µ–Ω—ã
  autoAssignShifts: async () => {
    const response = await api.post('/shift-assignments/auto-assign');
    return response.data;
  },

  // –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω
  clearShiftAssignments: async () => {
    const response = await api.delete('/shift-assignments');
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
  getDriversWithShifts: async () => {
    const response = await api.get('/drivers/with-shifts');
    return response.data;
  },
};

export default api;
