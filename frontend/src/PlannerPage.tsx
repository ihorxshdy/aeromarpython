import React, { useEffect, useMemo, useRef, useState } from 'react';
import { 
  DndContext, 
  DragEndEvent, 
  DragOverlay, 
  DragStartEvent,
  closestCenter,
  pointerWithin,
  rectIntersection 
} from '@dnd-kit/core';
import { Flight, Machine, Driver, DriverWithShift } from './types';
import { flightAPI, machineAPI, driverAPI, shiftsAPI } from './api';
import { DAY_START, DAY_END, GRID_STEP, toHHMM } from './utils';
import { DraggableFlight } from './components/DraggableFlight';
import { DroppableMachineSlot } from './components/DroppableMachineSlot';
import { DroppableUnassigned } from './components/DroppableUnassigned';
import { PlannerControls } from './components/PlannerControls';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
interface FlightAssignmentChange {
  id: string;
  flightId: string;
  flightNo: string;
  fromMachine?: string;
  toMachine?: string;
  originalVehicleId?: string;
  newVehicleId?: string;
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
const restrictToVerticalAxis = (args: any) => {
  const { transform, draggingNodeRect, activatorEvent } = args;
  
  if (!draggingNodeRect || !activatorEvent) {
    return transform;
  }

  return {
    x: 0, // –ë–ª–æ–∫–∏—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    y: transform.y, // –û—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    scaleX: transform.scaleX,
    scaleY: transform.scaleY,
  };
};

const PlannerPage: React.FC = () => {
  const [machines, setMachines] = useState<Machine[]>([]);
  const [drivers, setDrivers] = useState<Driver[]>([]);
  const [flights, setFlights] = useState<Flight[]>([]);
  const [autolifts, setAutolifts] = useState<string[]>([]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
  const [driversWithShifts, setDriversWithShifts] = useState<DriverWithShift[]>([]);
  
  // Drag and Drop —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [activeFlight, setActiveFlight] = useState<Flight | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  const [pendingChanges, setPendingChanges] = useState<FlightAssignmentChange[]>([]);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  
  // –í–æ–¥–∏—Ç–µ–ª–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
  // (—É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–æ –≤—ã—à–µ)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –≤—Ä–µ–º–µ–Ω —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const [customShiftTimes, setCustomShiftTimes] = useState<{
    [driverId: string]: {
      shiftStart: number;
      shiftEnd: number;
    }
  }>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ—Ç—ã –ø–æ–¥–≤–∞–ª–∞
  const [basementHeight, setBasementHeight] = useState(120); // –í—ã—Å–æ—Ç–∞ –¥–ª—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
  const [isResizing, setIsResizing] = useState(false);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const [horizontalScale, setHorizontalScale] = useState(1);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  const [chainWindows, setChainWindows] = useState<{
    [chainId: string]: {
      loadingWindow?: number;
      unloadingWindow?: number;
    }
  }>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ø–æ—á–∫–∏
  const [chainAutolifts, setChainAutolifts] = useState<{
    [chainId: string]: string;
  }>({});
  
  // –°—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤
  const [flightStatuses, setFlightStatuses] = useState<Record<string, 'completed' | 'in-progress' | 'planned'>>({});

  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–π—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–æ–±–æ–∫
  const [selectedFlights, setSelectedFlights] = useState<Set<string>>(new Set());
  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);
  const [selectedChain, setSelectedChain] = useState<string | null>(null);
  const [isDragging, setIsDragging] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–∑–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
  const [hoverMachineId, setHoverMachineId] = useState<string | null>(null);
  const [timeGapInfo, setTimeGapInfo] = useState<{
    machineId: string;
    beforeGap?: {
      flight?: Flight;
      gap: number;
      insertTime: number;
    };
    afterGap?: {
      flight?: Flight;
      gap: number;
      insertTime: number;
    };
  } | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞
  const getFlightStatus = (flight: Flight): 'completed' | 'in-progress' | 'planned' => {
    return flightStatuses[flight.flightNo] || 'planned';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞
  const updateFlightStatus = (flightNo: string, status: 'completed' | 'in-progress' | 'planned') => {
    setFlightStatuses(prev => ({
      ...prev,
      [flightNo]: status
    }));
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      console.log('üîÑ [DEBUG] loadData —Å—Ç–∞—Ä—Ç—É–µ—Ç...');
      console.log('üîç [DEBUG] –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
      console.log('üîç [DEBUG] customShiftTimes:', customShiftTimes);
      console.log('üîç [DEBUG] driversWithShifts:', driversWithShifts.length, '–≤–æ–¥–∏—Ç–µ–ª–µ–π');
      let machinesData = [];
      let driversData = [];
      let flightsData = [];
      let autoliftsResponse;
      try {
        [machinesData, driversData, flightsData, autoliftsResponse] = await Promise.all([
          machineAPI.getMachines(),
          driverAPI.getDrivers().catch((err) => {
            console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', err);
            throw err;
          }),
          flightAPI.getFlights(),
          fetch('/autolifts.csv')
        ]);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–º–µ–Ω–∞–º–∏
        try {
          const driversWithShiftsData = await shiftsAPI.getDriversWithShifts();
          console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª–∏ —Å–æ —Å–º–µ–Ω–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', driversWithShiftsData.length);
          setDriversWithShifts(driversWithShiftsData);
        } catch (err) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–º–µ–Ω–∞–º–∏:', err);
          // –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
        }
        
      } catch (err) {
        console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –≤ Promise.all –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        setLoading(false);
        return;
      }
      try {
        console.log('‚úÖ –ú–∞—à–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', machinesData.length);
        console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', driversData.length);
        console.log('‚úÖ –†–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', flightsData.length);
        console.log('üîç –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å:', driversData[0]);
        setMachines(machinesData);
        setDrivers(driversData);
        setFlights(flightsData);
        // –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ–ª–∏—Ñ—Ç—ã –∏–∑ CSV
        try {
          const autoliftsText = await autoliftsResponse.text();
          console.log('üìÑ –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤:', autoliftsText.substring(0, 200));
          const autoliftsData = autoliftsText
            .split('\n')
            .slice(1)
            .map(line => line.trim())
            .filter(line => line.length > 0);
          console.log('‚úÖ –ê–≤—Ç–æ–ª–∏—Ñ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', autoliftsData);
          setAutolifts(autoliftsData);
        } catch (e) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫:', e);
          const fallbackAutolifts = ['133', '135', '136', '139', '140', '141', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160'];
          setAutolifts(fallbackAutolifts);
        }
        // –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º customShiftTimes –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, 
        // —á—Ç–æ–±—ã getDriverShiftTime –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ drivers –∫–∞–∫ fallback
        console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:', driversData.length);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try {
          const driversWithShiftsData = await shiftsAPI.getDriversWithShifts();
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏:', driversWithShiftsData.length);
          setDriversWithShifts(driversWithShiftsData);
        } catch (err) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω–∞—Ö:', err);
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –∏–∑ localStorage
        const savedChains = localStorage.getItem('flight-chains');
        if (savedChains) {
          try {
            const chainData = JSON.parse(savedChains);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏:', Object.keys(chainData).length);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ chainId –∫ —Ä–µ–π—Å–∞–º
            const updatedFlights = flightsData.map(flight => ({
              ...flight,
              chainId: chainData[flight.id] || flight.chainId || ''
            }));
            setFlights(updatedFlights);
          } catch (e) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫:', e);
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–ª–∏—Ñ—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–µ–∫
        const savedAutolifts = localStorage.getItem('chain-autolifts');
        if (savedAutolifts) {
          try {
            const autoliftData = JSON.parse(savedAutolifts);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–ª–∏—Ñ—Ç—ã:', Object.keys(autoliftData).length);
            setChainAutolifts(autoliftData);
          } catch (e) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤:', e);
          }
        }
        
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ø–æ—á–µ–∫ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (flights.length > 0) {
      const chainData: Record<string, string> = {};
      flights.forEach(flight => {
        if (flight.chainId) {
          chainData[flight.id] = flight.chainId;
        }
      });
      localStorage.setItem('flight-chains', JSON.stringify(chainData));
      console.log('üíæ –¶–µ–ø–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }
  }, [flights]);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('chain-autolifts', JSON.stringify(chainAutolifts));
    console.log('üíæ –ê–≤—Ç–æ–ª–∏—Ñ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
  }, [chainAutolifts]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–∞ –∏–∑ –º–∞—à–∏–Ω—ã
  const getAutoliftFromMachine = (machineId: string): string => {
    const machine = machines.find(m => m.id === machineId);
    if (!machine) return '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ ID –º–∞—à–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "M133" -> "133")
    const autoliftNumber = machine.id.replace('M', '');
    return autoliftNumber;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–ª–∏—Ñ—Ç–∞ —Ü–µ–ø–æ—á–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω—ã
  const autoAssignAutolift = (chainId: string, machineId: string) => {
    // –ï—Å–ª–∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–µ –º–µ–Ω—è–µ–º
    if (chainAutolifts[chainId]) return;
    
    const autoliftNumber = getAutoliftFromMachine(machineId);
    if (autoliftNumber) {
      setChainAutolifts(prev => ({
        ...prev,
        [chainId]: autoliftNumber
      }));
      console.log(`üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–ª–∏—Ñ—Ç ${autoliftNumber} –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ ${chainId}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const getDriverShiftTime = (driverId: string) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (customShiftTimes[driverId]) {
      console.log(`üîç getDriverShiftTime(${driverId}): –≤–æ–∑–≤—Ä–∞—â–∞—é customShiftTimes:`, customShiftTimes[driverId]);
      return customShiftTimes[driverId];
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
    const driverWithShift = driversWithShifts.find(d => d.id === driverId);
    if (driverWithShift && driverWithShift.shift_start && driverWithShift.shift_end) {
      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –≤ –º–∏–Ω—É—Ç—ã (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)
      const parseTime = (timeStr: string | number, isEndTime: boolean = false) => {
        if (typeof timeStr === 'number') return timeStr;
        const [hours, minutes] = timeStr.split(':').map(Number);
        let totalMinutes = hours * 60 + minutes;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –∏ –æ–Ω–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 8:00 (480 –º–∏–Ω—É—Ç),
        // —Ç–æ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        if (isEndTime && totalMinutes <= 8 * 60) {
          totalMinutes += 24 * 60; // –î–æ–±–∞–≤–ª—è–µ–º 24 —á–∞—Å–∞
        }
        
        return totalMinutes;
      };
      
      const result = {
        shiftStart: parseTime(driverWithShift.shift_start, false),
        shiftEnd: parseTime(driverWithShift.shift_end, true)
      };
      console.log(`üîç getDriverShiftTime(${driverId}): –≤–æ–∑–≤—Ä–∞—â–∞—é driversWithShifts:`, result);
      return result;
    }
    
    // –ù–∞–∫–æ–Ω–µ—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ drivers
    const driver = drivers.find(d => d.id === driverId);
    if (driver) {
      console.log(`üîç getDriverShiftTime(${driverId}): –≤–æ–∑–≤—Ä–∞—â–∞—é driver data:`, { shiftStart: driver.shift_start, shiftEnd: driver.shift_end });
      return { shiftStart: driver.shift_start, shiftEnd: driver.shift_end };
    }
    
    console.log(`üîç getDriverShiftTime(${driverId}): –≤–æ–∑–≤—Ä–∞—â–∞—é default:`, { shiftStart: 6 * 60, shiftEnd: 22 * 60 });
    return { shiftStart: 6 * 60, shiftEnd: 22 * 60 };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã
  const calculateShiftDuration = (shiftStart: number, shiftEnd: number) => {
    let duration = shiftEnd - shiftStart;
    
    // –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª–∞, –∑–Ω–∞—á–∏—Ç —Å–º–µ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    if (duration < 0) {
      duration = (24 * 60) + duration; // –î–æ–±–∞–≤–ª—è–µ–º 24 —á–∞—Å–∞
    }
    
    const hours = Math.floor(duration / 60);
    const minutes = duration % 60;
    return `${hours}—á ${minutes > 0 ? minutes + '–º' : ''}`.trim();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
  const updateDriverShiftTime = (driverId: string, field: 'shiftStart' | 'shiftEnd', value: number) => {
    setCustomShiftTimes(prev => ({
      ...prev,
      [driverId]: {
        ...prev[driverId],
        [field]: value
      }
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ "–§–∞–º–∏–ª–∏—è –ò.–û."
  const formatDriverName = (fullName: string): string => {
    if (!fullName || fullName.trim() === '') return '–ë–µ–∑ –∏–º–µ–Ω–∏';
    
    const parts = fullName.trim().split(/\s+/);
    if (parts.length === 1) return parts[0]; // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    
    if (parts.length === 2) {
      // –ï—Å–ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞: "–§–∞–º–∏–ª–∏—è –ò–º—è" -> "–§–∞–º–∏–ª–∏—è –ò."
      const surname = parts[0];
      const firstName = parts[1];
      return `${surname} ${firstName.charAt(0).toUpperCase()}.`;
    }
    
    if (parts.length >= 3) {
      // –ï—Å–ª–∏ —Ç—Ä–∏ –∏–ª–∏ –±–æ–ª—å—à–µ —Å–ª–æ–≤: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ" -> "–§–∞–º–∏–ª–∏—è –ò.–û."
      const surname = parts[0];
      const firstName = parts[1];
      const middleName = parts[2];
      return `${surname} ${firstName.charAt(0).toUpperCase()}.${middleName.charAt(0).toUpperCase()}.`;
    }
    
    return fullName; // Fallback
  };

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
  const DRIVER_INFO_WIDTH = 140;  // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–¥–∏—Ç–µ–ª–µ (—É–º–µ–Ω—å—à–µ–Ω–∞ —Å 160 –¥–æ 140)
  const MACHINE_SELECT_WIDTH = 75; // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—à–∏–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–∞ —Å 65 –¥–æ 75)
  const SHIFT_TIME_WIDTH = 95; // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–º–µ–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–∞ —Å 80 –¥–æ 95)
  const WORK_DURATION_WIDTH = 59; // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã (—É–º–µ–Ω—å—à–µ–Ω–∞ —Å 79 –¥–æ 59)
  const TOTAL_DRIVERS_WIDTH = 369; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—â–∞—è —à–∏—Ä–∏–Ω–∞ (140 + 75 + 95 + 59 = 369)

  // –ú–∞—Å—à—Ç–∞–± –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const basePxPerMin = 4;  // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 2 –¥–æ 4 –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  const pxPerMin = basePxPerMin * horizontalScale;  // X - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
  const laneH = 55;      // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ —Å 45 –¥–æ 55 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const fontPx = Math.max(9, Math.min(11, laneH/5)); // –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

  // –°–∫—Ä–æ–ª–ª –∏ ¬´—Å–µ–π—á–∞—Å¬ª
  const mainRef = useRef<HTMLDivElement>(null);
  const footRef = useRef<HTMLDivElement>(null);
  const basementRef = useRef<HTMLDivElement>(null); // –î–ª—è –ø–æ–¥–≤–∞–ª–∞ —Å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–∞–º–∏
  const driversRef = useRef<HTMLDivElement>(null); // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  
  useEffect(() => {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π, –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π –∏ basement
    const timer = setTimeout(() => {
      const timeHeader = footRef.current;
      const mainArea = mainRef.current;
      const basement = basementRef.current;
      
      console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞...');
      
      if (!timeHeader || !mainArea || !basement) {
        console.log('‚ùå –ù–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:', {
          timeHeader: !!timeHeader, 
          mainArea: !!mainArea,
          basement: !!basement
        });
        return;
      }

      let isScrolling = false;
      
      // –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
      const syncHorizontalScroll = (sourceScrollLeft: number, sourceElement: HTMLElement) => {
        if (isScrolling) return;
        isScrolling = true;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫—Ä–æ–º–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (sourceElement !== timeHeader && timeHeader.scrollLeft !== sourceScrollLeft) {
          timeHeader.scrollLeft = sourceScrollLeft;
        }
        if (sourceElement !== mainArea && mainArea.scrollLeft !== sourceScrollLeft) {
          mainArea.scrollLeft = sourceScrollLeft;
        }
        if (sourceElement !== basement && basement.scrollLeft !== sourceScrollLeft) {
          basement.scrollLeft = sourceScrollLeft;
        }
        
        requestAnimationFrame(() => {
          isScrolling = false;
        });
      };

      // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      const onTimeHeaderScroll = () => {
        syncHorizontalScroll(timeHeader.scrollLeft, timeHeader);
      };
      
      const onMainAreaScroll = () => {
        syncHorizontalScroll(mainArea.scrollLeft, mainArea);
      };
      
      const onBasementScroll = () => {
        syncHorizontalScroll(basement.scrollLeft, basement);
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ –≤—Å–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
      timeHeader.addEventListener('scroll', onTimeHeaderScroll, { passive: true });
      mainArea.addEventListener('scroll', onMainAreaScroll, { passive: true });
      basement.addEventListener('scroll', onBasementScroll, { passive: true });
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π');

      return () => {
        timeHeader.removeEventListener('scroll', onTimeHeaderScroll);
        mainArea.removeEventListener('scroll', onMainAreaScroll);
        basement.removeEventListener('scroll', onBasementScroll);
      };
    }, 500);

    return () => clearTimeout(timer);
  }, []);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π –∏ –±–ª–æ–∫–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
  useEffect(() => {
    const mainArea = mainRef.current;
    const driversArea = driversRef.current;
    
    if (!mainArea || !driversArea) return;
    
    let isVerticalScrolling = false;
    
    const syncScrollTop = (sourceScrollTop: number, source: string) => {
      if (isVerticalScrolling) return;
      isVerticalScrolling = true;
      
      if (source !== 'main') mainArea.scrollTop = sourceScrollTop;
      if (source !== 'drivers') driversArea.scrollTop = sourceScrollTop;
      
      requestAnimationFrame(() => {
        isVerticalScrolling = false;
      });
    };
    
    const onMainVerticalScroll = () => {
      if (!isVerticalScrolling) {
        syncScrollTop(mainArea.scrollTop, 'main');
      }
    };
    
    const onDriversVerticalScroll = () => {
      if (!isVerticalScrolling) {
        syncScrollTop(driversArea.scrollTop, 'drivers');
      }
    };
    
    mainArea.addEventListener('scroll', onMainVerticalScroll);
    driversArea.addEventListener('scroll', onDriversVerticalScroll);
    
    return () => {
      mainArea.removeEventListener('scroll', onMainVerticalScroll);
      driversArea.removeEventListener('scroll', onDriversVerticalScroll);
    };
  }, []);

  const [nowLeft, setNowLeft] = useState(0);
  useEffect(() => {
    const tick = () => {
      const d = new Date();
      const m = d.getHours() * 60 + d.getMinutes();
      const left = (m - DAY_START) * pxPerMin;
      setNowLeft(left);
    };
    
    tick();
    const timer = setInterval(tick, 10_000);
    return () => clearInterval(timer);
  }, [pxPerMin]);

  // –§—É–Ω–∫—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const centerOnCurrentTime = () => {
    const timeHeader = footRef.current;
    const mainArea = mainRef.current;
    const basement = basementRef.current;
    
    if (!timeHeader || !mainArea || !basement) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏');
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏
    const containerWidth = mainArea.clientWidth;
    const scrollPosition = Math.max(0, nowLeft - containerWidth / 2);
    
    console.log('üéØ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏. nowLeft:', nowLeft, 'scrollPosition:', scrollPosition);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π
    timeHeader.scrollLeft = scrollPosition;
    mainArea.scrollLeft = scrollPosition;
    basement.scrollLeft = scrollPosition;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º multi-select
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isMultiSelectMode) {
        clearSelection();
        console.log('üîÑ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ multi-select –ø–æ Escape');
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isMultiSelectMode]);

  // –û—á–∏—Å—Ç–∫–∞ overflow –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      document.body.style.overflow = '';
    };
  }, []);

  // –ò–º–ø–æ—Ä—Ç CSV
  const fileRef = useRef<HTMLInputElement>(null);
  const [autoAfterImport, setAutoAfterImport] = useState(true);
  
  const onPick = () => fileRef.current?.click();
  
  const onFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    try {
      setLoading(true);
      setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      console.log('üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª:', file.name, '—Ä–∞–∑–º–µ—Ä:', file.size);
      
      const importedFlights = await flightAPI.importCSV(file);
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ–π—Å–æ–≤:', importedFlights.length);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setFlights([...importedFlights]); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
      
      if (autoAfterImport) {
        console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...');
        await handleAutoAssign();
      }
      
      // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
      if (fileRef.current) {
        fileRef.current.value = '';
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV:', err);
      setError(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
    }
  };

  // –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
  const handleAutoAssign = async () => {
    try {
      console.log('üîç handleAutoAssign: –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ');
      setLoading(true);
      
      console.log('üîç handleAutoAssign: –í—ã–∑—ã–≤–∞–µ–º flightAPI.autoAssign()');
      const result = await flightAPI.autoAssign();
      console.log('üîç handleAutoAssign: autoAssign —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      console.log('üîç handleAutoAssign: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã');
      const updatedFlights = await flightAPI.getFlights();
      console.log('üîç handleAutoAssign: –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–π—Å–æ–≤:', updatedFlights.length);
      
      setFlights(updatedFlights);
      setError(null);
      console.log('üîç handleAutoAssign: –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (err) {
      console.error('üîç handleAutoAssign: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', err);
      setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω
  const handleAutoAssignShifts = async () => {
    try {
      setLoading(true);
      console.log('üîç handleAutoAssignShifts: –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω');
      
      const result = await shiftsAPI.autoAssignShifts();
      console.log('üîç handleAutoAssignShifts: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω:', result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
      const driversWithShifts = await shiftsAPI.getDriversWithShifts();
      console.log('üîç handleAutoAssignShifts: –í–æ–¥–∏—Ç–µ–ª–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏:', driversWithShifts);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setDriversWithShifts(driversWithShifts);
      console.log('üîç handleAutoAssignShifts: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ driversWithShifts:', driversWithShifts.length, '–≤–æ–¥–∏—Ç–µ–ª–µ–π');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setCustomShiftTimes({});
      console.log('üîç handleAutoAssignShifts: –°–±—Ä–æ—à–µ–Ω—ã customShiftTimes');
      
      setError(null);
      console.log('üîç handleAutoAssignShifts: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      alert(`–ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å–º–µ–Ω: ${result.assignments?.length || 0}`);
      
    } catch (err) {
      console.error('üîç handleAutoAssignShifts: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω:', err);
      setError('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –°–±—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  const handleResetAssign = async () => {
    try {
      setLoading(true);
      await flightAPI.resetAssignments();
      const updatedFlights = await flightAPI.getFlights();
      setFlights(updatedFlights);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
  const actualDayEnd = useMemo(() => {
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤
    let maxTime = DAY_END;
    
    flights.forEach(flight => {
      if (flight.loadEnd > maxTime) {
        maxTime = flight.loadEnd;
      }
      if (flight.serviceEnd > maxTime) {
        maxTime = flight.serviceEnd;
      }
      if (flight.unloadEnd > maxTime) {
        maxTime = flight.unloadEnd;
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —á–∞—Å–∞–º
    const bufferTime = 60; // 1 —á–∞—Å –±—É—Ñ–µ—Ä–∞
    const extendedTime = maxTime + bufferTime;
    const alignedTime = Math.ceil(extendedTime / 60) * 60; // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —á–∞—Å–∞–º
    
    return Math.max(DAY_END, alignedTime);
  }, [flights]);
  
  const totalWidth = useMemo(() => (actualDayEnd - DAY_START) * pxPerMin, [pxPerMin, actualDayEnd]);
  const gridLines: number[] = useMemo(() => {
    const lines: number[] = [];
    for (let m = DAY_START; m <= actualDayEnd; m += GRID_STEP) {
      lines.push(m);
    }
    return lines;
  }, [actualDayEnd]);
  
  // –û—Å–æ–±—ã–µ —Ç–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
  const midnightMarkers: number[] = [];
  // –ü–æ–ª–Ω–æ—á—å (0:00) - –≥—Ä–∞–Ω–∏—Ü–∞ –¥–Ω–µ–π
  midnightMarkers.push(0);
  // –ï—Å–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ª–Ω–æ—á—å
  if (actualDayEnd >= 24 * 60) {
    midnightMarkers.push(24 * 60);
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ –º–∞—à–∏–Ω–∞–º
  const flightsByMachine = useMemo(() => {
    const byMachine: Record<string, Flight[]> = {};
    machines.forEach(m => byMachine[m.id] = []);
    
    flights.forEach(f => {
      if (f.vehicleId && f.vehicleId.trim() !== '') {
        byMachine[f.vehicleId] = byMachine[f.vehicleId] || [];
        byMachine[f.vehicleId].push(f);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    Object.values(byMachine).forEach(list => 
      list.sort((a, b) => a.serviceStart - b.serviceStart)
    );
    
    console.log('üîÑ –†–µ–π—Å—ã –ø–æ –º–∞—à–∏–Ω–∞–º/–≤–æ–¥–∏—Ç–µ–ª—è–º:', byMachine);
    console.log('üîÑ –í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤:', flights.length, '–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö:', flights.filter(f => f.vehicleId && f.vehicleId.trim() !== '').length);
    
    return byMachine;
  }, [flights, machines]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–µ–≤ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ä–µ–π—Å–æ–≤
  const calculateFlightLayers = useMemo(() => {
    const layersByMachine: Record<string, Array<{ flight: Flight; layer: number }>> = {};
    
    Object.entries(flightsByMachine).forEach(([machineId, machineFlights]) => {
      const flightsWithLayers: Array<{ flight: Flight; layer: number }> = [];
      
      machineFlights.forEach(flight => {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
        let layer = 0;
        let placed = false;
        
        while (!placed) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Ä–µ–π—Å–∞–º–∏ –Ω–∞ —ç—Ç–æ–º —Å–ª–æ–µ
          const conflictOnLayer = flightsWithLayers.some(item => 
            item.layer === layer && 
            !(flight.serviceEnd <= item.flight.serviceStart || flight.serviceStart >= item.flight.serviceEnd)
          );
          
          if (!conflictOnLayer) {
            flightsWithLayers.push({ flight, layer });
            placed = true;
          } else {
            layer++;
          }
        }
      });
      
      layersByMachine[machineId] = flightsWithLayers;
    });
    
    return layersByMachine;
  }, [flightsByMachine]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–µ–≤ –¥–ª—è –º–∞—à–∏–Ω—ã
  const getLayerCount = (machineId: string): number => {
    const layers = calculateFlightLayers[machineId] || [];
    return Math.max(1, ...layers.map(item => item.layer + 1));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–µ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è (–ø–æ –µ–≥–æ driverId –∫–∞–∫ vehicleId)
  const getLayerCountForDriver = (driverId: string): number => {
    const layers = calculateFlightLayers[driverId] || [];
    return Math.max(1, ...layers.map(item => item.layer + 1));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—è —Ä–µ–π—Å–∞
  const getFlightLayer = (flightId: string, machineId: string): number => {
    const layers = calculateFlightLayers[machineId] || [];
    const item = layers.find(item => item.flight.id === flightId);
    return item?.layer || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Ü–µ–ø–æ—á–∫–∏ –ø–æ —Å–ª–æ—è–º (–≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)
  const getChainLayerBounds = (chainId: string, machineId: string): { minLayer: number; maxLayer: number; top: number; height: number } => {
    const layers = calculateFlightLayers[machineId] || [];
    const chainLayers = layers.filter(item => item.flight.chainId === chainId).map(item => item.layer);
    
    if (chainLayers.length === 0) {
      return { minLayer: 0, maxLayer: 0, top: 0, height: 25 };
    }
    
    const minLayer = Math.min(...chainLayers);
    const maxLayer = Math.max(...chainLayers);
    const totalLayers = getLayerCount(machineId);
    const flightHeight = laneH - 12; // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Ä–µ–π—Å–∞
    const layerSpacing = flightHeight + 6; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    
    if (totalLayers === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª–æ–π, —Å–∫–æ–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
      return {
        minLayer: 0,
        maxLayer: 0,
        top: (laneH - 25) / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–∫–æ–±–∫—É —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        height: 25 // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Å–∫–æ–±–∫–∏
      };
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤, —Å–∫–æ–±–∫–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª–æ–∏ —Ü–µ–ø–æ—á–∫–∏
      const dynamicLaneH = Math.max(laneH, totalLayers * layerSpacing + 12);
      const totalHeight = totalLayers * layerSpacing;
      const centerY = dynamicLaneH / 2;
      const startY = centerY - totalHeight / 2;
      
      const chainTop = startY + minLayer * layerSpacing;
      const chainBottom = startY + maxLayer * layerSpacing + flightHeight;
      const chainHeight = Math.max(25, chainBottom - chainTop); // –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
      
      return {
        minLayer,
        maxLayer,
        top: chainTop,
        height: chainHeight
      };
    }
  };

  // –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã
  const unassignedFlights = flights.filter(f => !f.vehicleId || f.vehicleId.trim() === '');
  
  // –¶–µ–ø–æ—á–∫–∏/—Å–∫–æ–±–∫–∏ –ø–æ chainId, –æ—Ç kitchenOut –ø–µ—Ä–≤–æ–≥–æ –¥–æ unloadEnd –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
  const chainsByMachine = useMemo(() => {
    // —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é –∏ chainId (–ø—É—Å—Ç—ã–º —Ä–µ–π—Å–∞–º –¥–∞—ë–º —Å–≤–æ–π "solo-..." chainId)
    const byM: Record<string, Record<string, Flight[]>> = {};
    for (const d of drivers) byM[d.id] = {};
    for (const f of flights) if (f.vehicleId) {
      const mid = f.vehicleId;
      const cid = f.chainId && f.chainId.length ? f.chainId : `solo-${f.id}`;
      (byM[mid][cid] ??= []).push(f);
    }
    const res: Record<string, Array<{chainId: string; machineId: string; start: number; end: number}>> = {};
    for (const mid of Object.keys(byM)) {
      const chains = byM[mid];
      const arr: Array<{chainId: string; machineId: string; start: number; end: number}> = [];
      for (const cid of Object.keys(chains)) {
        const list = chains[cid].slice().sort((a,b)=>a.serviceStart-b.serviceStart);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫ (–Ω–µ solo) –∏ –µ—Å–ª–∏ –≤ —Ü–µ–ø–æ—á–∫–µ –±–æ–ª—å—à–µ 1 —Ä–µ–π—Å–∞
        if (cid.startsWith('solo-') || list.length < 2) continue; 
        
        // –ü–†–ê–í–ò–õ–¨–ù–´–ï –≥—Ä–∞–Ω–∏—Ü—ã —Å–∫–æ–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º
        const firstFlight = list[0];
        const lastFlight = list[list.length - 1];
        
        // –ù–∞—á–∞–ª–æ —Å–∫–æ–±–∫–∏: –∑–∞ LOAD_SMS/LOAD_DMS –º–∏–Ω—É—Ç –¥–æ STD –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞
        const isDMS = firstFlight.type === 'DMS';
        const LOAD_TIME = isDMS ? 180 : 155; // LOAD_DMS = 180, LOAD_SMS = 155
        const start = firstFlight.stdMin - LOAD_TIME;
        
        // –ö–æ–Ω–µ—Ü —Å–∫–æ–±–∫–∏: —á–µ—Ä–µ–∑ RETURN_UNLOAD –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Å–∞  
        const RETURN_UNLOAD = 20;
        const end = lastFlight.serviceEnd + RETURN_UNLOAD;
        arr.push({ chainId: cid, machineId: mid, start: Math.max(DAY_START, start), end: Math.min(actualDayEnd, end) });
      }
      // —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
      arr.sort((a,b)=>a.start-b.start);
      res[mid] = arr;
    }
    return res;
  }, [flights, drivers]);
  
  // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π
  const arrangeUnassignedFlights = useMemo(() => {
    const flightsWithPositions = [...unassignedFlights].sort((a, b) => a.serviceStart - b.serviceStart);
    const lanes: { [key: number]: { start: number; end: number }[] } = {};
    
    return flightsWithPositions.map(flight => {
      let laneIndex = 0;
      
      // –ù–∞–π–¥–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–ª–æ—Å—É
      while (lanes[laneIndex]) {
        const hasConflict = lanes[laneIndex].some(existing => 
          !(flight.serviceEnd <= existing.start || flight.serviceStart >= existing.end)
        );
        if (!hasConflict) break;
        laneIndex++;
      }
      
      // –î–æ–±–∞–≤–∏–º —Ä–µ–π—Å –≤ —ç—Ç—É –ø–æ–ª–æ—Å—É
      if (!lanes[laneIndex]) lanes[laneIndex] = [];
      lanes[laneIndex].push({ start: flight.serviceStart, end: flight.serviceEnd });
      
      return { ...flight, laneIndex };
    });
  }, [unassignedFlights]);

  // Custom collision detection –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
  const customCollisionDetection = (args: any) => {
    const { droppableRects, droppableContainers, active, pointerCoordinates } = args;
    
    if (!pointerCoordinates) {
      return rectIntersection(args);
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
    const unassignedContainer = droppableContainers.find((container: any) => container.id === 'unassigned');
    if (unassignedContainer) {
      const rect = droppableRects.get('unassigned');
      if (rect) {
        const isWithinUnassigned = 
          pointerCoordinates.x >= rect.left &&
          pointerCoordinates.x <= rect.right &&
          pointerCoordinates.y >= rect.top &&
          pointerCoordinates.y <= rect.bottom;
        
        if (isWithinUnassigned) {
          return [{ id: 'unassigned' }];
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    return rectIntersection(args);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∑–æ—Ä–æ–≤ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ä–µ–π—Å–∞
  const calculateTimeGap = (machineId: string, insertTime: number) => {
    const machineFlights = flightsByMachine[machineId] || [];
    const sortedFlights = [...machineFlights].sort((a, b) => a.serviceStart - b.serviceStart);
    
    if (!activeFlight) return { machineId };
    
    const draggedFlightStart = activeFlight.serviceStart;
    const draggedFlightEnd = activeFlight.serviceEnd;
    const draggedFlightDuration = draggedFlightEnd - draggedFlightStart;
    
    let beforeFlight: Flight | undefined;
    let afterFlight: Flight | undefined;
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–π—Å—ã –¥–æ –∏ –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏
    for (let i = 0; i < sortedFlights.length; i++) {
      const flight = sortedFlights[i];
      if (flight.serviceStart <= insertTime) {
        beforeFlight = flight;
      }
      if (flight.serviceStart > insertTime && !afterFlight) {
        afterFlight = flight;
        break;
      }
    }
    
    const result: {
      machineId: string;
      beforeGap?: { flight?: Flight; gap: number; insertTime: number };
      afterGap?: { flight?: Flight; gap: number; insertTime: number };
    } = { machineId };
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–∑–æ—Ä —Å–ª–µ–≤–∞ –æ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–π—Å–∞ (–æ—Ç –Ω–∞—á–∞–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
    if (beforeFlight) {
      const beforeGap = draggedFlightStart - beforeFlight.serviceEnd;
      if (beforeGap >= 0) {
        result.beforeGap = {
          flight: beforeFlight,
          gap: beforeGap,
          insertTime: beforeFlight.serviceEnd
        };
      }
    } else {
      // –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ä–µ–π—Å–æ–º
      const beforeGap = draggedFlightStart - DAY_START;
      if (beforeGap >= 0) {
        result.beforeGap = {
          gap: beforeGap,
          insertTime: DAY_START
        };
      }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–∑–æ—Ä —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–π—Å–∞ (–æ—Ç –∫–æ–Ω—Ü–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
    if (afterFlight) {
      const afterGap = afterFlight.serviceStart - draggedFlightEnd;
      if (afterGap >= 0) {
        result.afterGap = {
          flight: afterFlight,
          gap: afterGap,
          insertTime: draggedFlightEnd
        };
      }
    } else {
      // –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Å–∞
      const afterGap = actualDayEnd - draggedFlightEnd;
      if (afterGap >= 0) {
        result.afterGap = {
          gap: afterGap,
          insertTime: draggedFlightEnd
        };
      }
    }
    
    return result;
  };
  
  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const flight = flights.find(f => f.id === active.id);
    if (flight) {
      setActiveFlight(flight);
      setIsDragging(true);
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      document.body.style.overflow = 'hidden';
    }
  };

  const handleDragOver = (event: any) => {
    const { active, over } = event;
    
    if (!active || !over || !activeFlight) return;
    
    // –ï—Å–ª–∏ –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–∞ –º–∞—à–∏–Ω—É, –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–∑–æ—Ä
    if (over.data.current?.type === 'machine') {
      const machineId = over.id as string;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ä–µ–π—Å–∞ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
      const currentTime = activeFlight.serviceStart;
      
      const gapInfo = calculateTimeGap(machineId, currentTime);
      setTimeGapInfo(gapInfo);
      setHoverMachineId(machineId);
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∑–æ—Ä–µ
      setTimeGapInfo(null);
      setHoverMachineId(null);
    }
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;
    setActiveFlight(null);
    setIsDragging(false);
    setTimeGapInfo(null); // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∑–æ—Ä–µ
    setHoverMachineId(null);
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = '';
    
    console.log('üéØ DragEnd:', { 
      activeId: active.id, 
      overId: over?.id, 
      overType: over?.data.current?.type
    });
    
    if (!over) {
      return;
    }
    
    const flightId = active.id as string;
    const flight = flights.find(f => f.id === flightId);
    if (!flight) return;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞ –º–∞—à–∏–Ω—É
    if (over.data.current?.type === 'machine') {
      const machineId = over.id as string;
      const machine = machines.find(m => m.id === machineId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–Ω–µ –Ω–∞ —Ç—É –∂–µ –º–∞—à–∏–Ω—É)
      if (flight.vehicleId === machineId) {
        return; // –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
      const existingChangeIndex = pendingChanges.findIndex(c => c.flightId === flight.id);
      
      if (existingChangeIndex >= 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const existingChange = pendingChanges[existingChangeIndex];
        
        // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—à–∏–Ω—É, —É–¥–∞–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if (existingChange.originalVehicleId === machineId) {
          setPendingChanges(prev => prev.filter(c => c.flightId !== flight.id));
          setFlights(prev => prev.map(f => 
            f.id === flightId ? { ...f, vehicleId: machineId } : f
          ));
          return;
        }
        
        // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const updatedChange: FlightAssignmentChange = {
          ...existingChange,
          toMachine: machine?.name || machineId,
          newVehicleId: machineId
        };
        
        setPendingChanges(prev => prev.map(c => 
          c.id === existingChange.id ? updatedChange : c
        ));
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const changeId = Date.now().toString();
        const change: FlightAssignmentChange = {
          id: changeId,
          flightId: flight.id,
          flightNo: flight.flightNo,
          fromMachine: flight.vehicleId ? machines.find(m => m.id === flight.vehicleId)?.name : '–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
          toMachine: machine?.name || machineId,
          originalVehicleId: flight.vehicleId,
          newVehicleId: machineId
        };
        
        setPendingChanges(prev => [...prev, change]);
      }
      
      // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Å
      setFlights(prev => prev.map(f => 
        f.id === flightId ? { ...f, vehicleId: machineId } : f
      ));
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ
    if (over.data.current?.type === 'unassigned') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º)
      if (!flight.vehicleId) {
        return; // –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–π—Å–∞
      const existingChangeIndex = pendingChanges.findIndex(c => c.flightId === flight.id);
      
      if (existingChangeIndex >= 0) {
        const existingChange = pendingChanges[existingChangeIndex];
        
        // –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, —É–¥–∞–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if (!existingChange.originalVehicleId) {
          setPendingChanges(prev => prev.filter(c => c.flightId !== flight.id));
          setFlights(prev => prev.map(f => 
            f.id === flightId ? { ...f, vehicleId: '' } : f
          ));
          return;
        }
        
        // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const updatedChange: FlightAssignmentChange = {
          ...existingChange,
          toMachine: '–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
          newVehicleId: ''
        };
        
        setPendingChanges(prev => prev.map(c => 
          c.id === existingChange.id ? updatedChange : c
        ));
      } else {
        const changeId = Date.now().toString();
        const machine = machines.find(m => m.id === flight.vehicleId);
        const change: FlightAssignmentChange = {
          id: changeId,
          flightId: flight.id,
          flightNo: flight.flightNo,
          fromMachine: machine?.name || flight.vehicleId,
          toMachine: '–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
          originalVehicleId: flight.vehicleId,
          newVehicleId: ''
        };
        
        setPendingChanges(prev => [...prev, change]);
      }
      
      // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Å
      setFlights(prev => prev.map(f => 
        f.id === flightId ? { ...f, vehicleId: '' } : f
      ));
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  const handleRemoveChange = (changeId: string) => {
    const change = pendingChanges.find(c => c.id === changeId);
    if (!change) return;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–π—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    setFlights(prev => prev.map(f => 
      f.id === change.flightId 
        ? { ...f, vehicleId: change.originalVehicleId || '' }
        : f
    ));
    
    // –£–¥–∞–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    setPendingChanges(prev => prev.filter(c => c.id !== changeId));
  };
  
  const handleApplyChanges = async () => {
    try {
      setLoading(true);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      for (const change of pendingChanges) {
        if (change.newVehicleId) {
          await flightAPI.assignFlight(change.flightId, change.newVehicleId);
        } else {
          await flightAPI.unassignFlight(change.flightId);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const updatedFlights = await flightAPI.getFlights();
      setFlights(updatedFlights);
      
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setPendingChanges([]);
      setShowSaveDialog(false);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  const handleCancelChanges = () => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–µ–π—Å—ã –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    let updatedFlights = [...flights];
    
    pendingChanges.forEach(change => {
      updatedFlights = updatedFlights.map(f => 
        f.id === change.flightId 
          ? { ...f, vehicleId: change.originalVehicleId || '' }
          : f
      );
    });
    
    setFlights(updatedFlights);
    setPendingChanges([]);
    setShowSaveDialog(false);
  };
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏ —Å–∫–æ–±–∫–∞–º–∏
  const toggleFlightSelection = (flightId: string) => {
    const flight = flights.find(f => f.id === flightId);
    if (!flight) return;

    setSelectedFlights(prev => {
      const newSelected = new Set(prev);
      
      if (newSelected.has(flightId)) {
        // –£–±–∏—Ä–∞–µ–º —Ä–µ–π—Å –∏–∑ –≤—ã–±–æ—Ä–∞
        newSelected.delete(flightId);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Å –≤ –≤—ã–±–æ—Ä, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞ —Ç–æ–π –∂–µ –º–∞—à–∏–Ω–µ
        if (newSelected.size > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –Ω–∞ —Ç–æ–π –∂–µ –º–∞—à–∏–Ω–µ
          const selectedFlightIds = Array.from(newSelected);
          const selectedFlightObjects = flights.filter(f => selectedFlightIds.includes(f.id));
          const firstMachine = selectedFlightObjects[0]?.vehicleId;
          
          if (flight.vehicleId !== firstMachine) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Å
            console.log('–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–µ–π—Å—ã —Å —Ä–∞–∑–Ω—ã—Ö –º–∞—à–∏–Ω');
            return prev; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∞–±–æ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          }
        }
        
        // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Å
        newSelected.add(flightId);
      }
      return newSelected;
    });
  };

  const clearSelection = () => {
    setSelectedFlights(new Set());
    setIsMultiSelectMode(false);
    setSelectedChain(null);
  };

  const handleChainClick = (chainId: string) => {
    setSelectedChain(selectedChain === chainId ? null : chainId);
  };

  const breakSelectedChain = () => {
    if (!selectedChain) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–±–∫—É –¥–ª—è —Ä–∞–∑–±–∏—Ç–∏—è, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –Ω–µ–π');
      return;
    }
    
    breakChain(selectedChain);
    setSelectedChain(null);
  };

  const createChainFromSelected = () => {
    if (selectedFlights.size < 2) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ä–µ–π—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–æ–±–∫–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ
    const selectedFlightIds = Array.from(selectedFlights);
    const selectedFlightObjects = flights.filter(f => selectedFlightIds.includes(f.id));
    
    if (selectedFlightObjects.length === 0) return;
    
    const firstMachine = selectedFlightObjects[0].vehicleId;
    const allOnSameMachine = selectedFlightObjects.every(f => f.vehicleId === firstMachine);
    
    if (!allOnSameMachine) {
      alert('–í—Å–µ —Ä–µ–π—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–æ–±–∫–∏');
      return;
    }

    if (!firstMachine) {
      alert('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–∫–æ–±–∫—É –¥–ª—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π chainId
    const newChainId = `chain-${Date.now()}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Å—ã
    setFlights(prev => prev.map(f => 
      selectedFlightIds.includes(f.id) 
        ? { ...f, chainId: newChainId }
        : f
    ));

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–≤—Ç–æ–ª–∏—Ñ—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω—ã
    autoAssignAutolift(newChainId, firstMachine);

    // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    clearSelection();
  };

  const breakChain = (chainId: string) => {
    if (!chainId || chainId.startsWith('solo-')) return;
    
    // –£–±–∏—Ä–∞–µ–º chainId —É –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤ –≤ —ç—Ç–æ–π —Å–∫–æ–±–∫–µ
    setFlights(prev => prev.map(f => 
      f.chainId === chainId 
        ? { ...f, chainId: '' }
        : f
    ));
  };

  const handleFlightClick = (event: React.MouseEvent, flightId: string) => {
    if (event.shiftKey) {
      setIsMultiSelectMode(true);
      
      const flight = flights.find(f => f.id === flightId);
      if (!flight) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–∞–º–∏
      if (selectedFlights.size > 0) {
        const selectedFlightIds = Array.from(selectedFlights);
        const selectedFlightObjects = flights.filter(f => selectedFlightIds.includes(f.id));
        const firstMachine = selectedFlightObjects[0]?.vehicleId;
        
        if (flight.vehicleId !== firstMachine) {
          // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–¥—Å–≤–µ—Ç–∏–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
          console.log('‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ä–µ–π—Å—ã —Å —Ä–∞–∑–Ω—ã—Ö –º–∞—à–∏–Ω');
          
          // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏–º —Ä–µ–π—Å –∫—Ä–∞—Å–Ω—ã–º
          const element = event.currentTarget as HTMLElement;
          const originalBorder = element.style.border;
          element.style.border = '3px solid #DC2626';
          element.style.backgroundColor = '#FEE2E2';
          
          setTimeout(() => {
            element.style.border = originalBorder;
            element.style.backgroundColor = '';
          }, 500);
          
          event.preventDefault();
          event.stopPropagation();
          return;
        }
      }
      
      toggleFlightSelection(flightId);
      event.preventDefault();
      event.stopPropagation();
    } else if (!isMultiSelectMode) {
      // –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –±–µ–∑ shift - –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
      clearSelection();
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—é
  const handleDriverMachineChange = (driverId: string, machineId: string) => {
    setDrivers(prevDrivers => 
      prevDrivers.map(d => 
        d.id === driverId 
          ? { ...d, machineId: machineId || '' }
          : { ...d, machineId: d.machineId === machineId ? '' : d.machineId } // –£–±–∏—Ä–∞–µ–º –º–∞—à–∏–Ω—É —É –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      )
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã
  const checkDriverOvertime = (driverId: string) => {
    const driver = drivers.find(d => d.id === driverId);
    if (!driver) return false;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –ø–æ –µ–≥–æ ID (vehicleId = driverId)
    const driverFlights = flightsByMachine[driverId] || [];
    if (driverFlights.length === 0) return false;
    
    const firstFlight = driverFlights[0];
    const lastFlight = driverFlights[driverFlights.length - 1];
    
    const shiftTime = getDriverShiftTime(driver.id);
    return firstFlight.serviceStart < shiftTime.shiftStart || lastFlight.serviceEnd > shiftTime.shiftEnd;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  return (
    <DndContext 
      onDragStart={handleDragStart} 
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
      onDragCancel={() => {
        setActiveFlight(null);
        setIsDragging(false);
        setTimeGapInfo(null);
        setHoverMachineId(null);
        document.body.style.overflow = '';
      }}
      autoScroll={false}
      collisionDetection={customCollisionDetection}
    >
      <div className="h-screen flex flex-col overflow-hidden" style={{ 
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
        cursor: isResizing ? 'ns-resize' : 'default' 
      }}>
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Å—Ç–∏–ª–µ */}
      <div className="shadow-md border-b flex-none z-50" style={{ 
        background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
        height: '32px', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <h1 className="text-xl font-semibold" style={{ 
          margin: 0, 
          lineHeight: '1',
          color: '#475569'
        }}>
          –ê—ç—Ä–æ–º–∞—Ä
        </h1>
      </div>

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="border-b px-4 py-2 flex-none z-40" style={{
        background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <div className="flex items-center justify-between">
          {/* –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex items-center gap-2">
            {/* –ò–º–ø–æ—Ä—Ç CSV */}
            <button
              onClick={onPick}
              disabled={loading}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#e0f2fe',
                color: '#0c4a6e',
                borderColor: '#7dd3fc',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–ò–º–ø–æ—Ä—Ç CSV —Ñ–∞–π–ª–∞"
            >
              –ò–º–ø–æ—Ä—Ç
            </button>
            
            <input
              ref={fileRef}
              type="file"
              accept=".csv"
              onChange={onFile}
              className="hidden"
            />
            
            {/* –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ */}
            <button
              onClick={handleAutoAssign}
              disabled={loading || flights.length === 0}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#e0f2fe',
                color: '#0c4a6e',
                borderColor: '#7dd3fc',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤"
            >
              –ê–≤—Ç–æ
            </button>

            {/* –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω */}
            <button
              onClick={handleAutoAssignShifts}
              disabled={loading}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#f0fdf4',
                color: '#166534',
                borderColor: '#86efac',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º"
            >
              –°–º–µ–Ω—ã
            </button>
            
            {/* –°–±—Ä–æ—Å */}
            <button
              onClick={handleResetAssign}
              disabled={loading}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#e0f2fe',
                color: '#0c4a6e',
                borderColor: '#7dd3fc',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"
            >
              –°–±—Ä–æ—Å
            </button>

            {/* –û–±–Ω–æ–≤–∏—Ç—å */}
            <button
              onClick={async () => {
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                try {
                  setLoading(true);
                  const [machinesData, flightsData] = await Promise.all([
                    machineAPI.getMachines(),
                    flightAPI.getFlights()
                  ]);
                  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - –º–∞—à–∏–Ω—ã:', machinesData.length, '—Ä–µ–π—Å—ã:', flightsData.length);
                  setMachines(machinesData);
                  setFlights(flightsData);
                } catch (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
                } finally {
                  setLoading(false);
                }
              }}
              disabled={loading}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#e0f2fe',
                color: '#0c4a6e',
                borderColor: '#7dd3fc',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            
            {/* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ */}
            <button
              onClick={centerOnCurrentTime}
              disabled={loading}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: '#fef3c7',
                color: '#92400e',
                borderColor: '#fde68a',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏"
            >
              –ö —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            </button>
            
            {/* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É */}
            <button
              onClick={() => setShowSaveDialog(true)}
              disabled={loading || pendingChanges.length === 0}
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
              style={{
                backgroundColor: pendingChanges.length > 0 ? '#e0f2fe' : '#f1f5f9',
                color: pendingChanges.length > 0 ? '#0c4a6e' : '#64748b',
                borderColor: pendingChanges.length > 0 ? '#7dd3fc' : '#cbd5e1',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title={`–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (${pendingChanges.length})`}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {pendingChanges.length > 0 && `(${pendingChanges.length})`}
            </button>
            
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–±–∫–∞–º–∏ */}
            <div className="flex items-center gap-1 border-l pl-3 ml-2">
              <button
                onClick={createChainFromSelected}
                disabled={selectedFlights.size < 2}
                className="px-3 py-1 text-xs font-medium rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: selectedFlights.size >= 2 ? '#e0f2fe' : '#f8fafc',
                  color: selectedFlights.size >= 2 ? '#0369a1' : '#94a3b8',
                  borderColor: selectedFlights.size >= 2 ? '#7dd3fc' : '#e2e8f0',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}
                title="–°–æ–∑–¥–∞—Ç—å —Å–∫–æ–±–∫—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ (Shift+–∫–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞)"
              >
                –°–∫–æ–±–∫–∞ ({selectedFlights.size})
              </button>
              
              <button
                onClick={breakSelectedChain}
                disabled={!selectedChain}
                className="px-3 py-1 text-xs font-medium rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: selectedChain ? '#fecaca' : '#f8fafc',
                  color: selectedChain ? '#dc2626' : '#94a3b8',
                  borderColor: selectedChain ? '#fca5a5' : '#e2e8f0',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}
                title="–†–∞–∑–±–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∫–æ–±–∫—É (—Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å–∫–æ–±–∫–µ)"
              >
                –†–∞–∑–±–∏—Ç—å
              </button>
              
              <button
                onClick={clearSelection}
                disabled={selectedFlights.size === 0}
                className="px-3 py-1 text-xs font-medium rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: selectedFlights.size > 0 ? '#fef3c7' : '#f8fafc',
                  color: selectedFlights.size > 0 ? '#92400e' : '#94a3b8',
                  borderColor: selectedFlights.size > 0 ? '#fde68a' : '#e2e8f0',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}
                title="–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ multi-select */}
            {isMultiSelectMode && (
              <div className="px-2 py-1 text-xs font-medium rounded border transition-all duration-200"
                style={{
                  backgroundColor: '#fef3c7',
                  color: '#92400e',
                  borderColor: '#fde68a',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}
                title="–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Å–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–û—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è –≤—ã—Ö–æ–¥–∞."
              >
                üéØ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="flex items-center gap-2">
            {/* –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ —Å—Ç–∏–ª–µ –∫–Ω–æ–ø–∫–∏ */}
            <label 
              className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200 flex items-center gap-2 cursor-pointer"
              style={{
                backgroundColor: autoAfterImport ? '#e0f2fe' : '#f8fafc',
                color: autoAfterImport ? '#0c4a6e' : '#64748b',
                borderColor: autoAfterImport ? '#7dd3fc' : '#e2e8f0',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–µ–π—Å—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞"
            >
              <input
                type="checkbox"
                checked={autoAfterImport}
                onChange={e => setAutoAfterImport(e.target.checked)}
                className="hidden"
              />
              <span className="w-3 h-3 rounded border flex items-center justify-center text-xs"
                style={{
                  backgroundColor: autoAfterImport ? '#0c4a6e' : 'transparent',
                  borderColor: autoAfterImport ? '#0c4a6e' : '#94a3b8',
                  color: 'white'
                }}
              >
                {autoAfterImport && '‚úì'}
              </span>
              –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            </label>
            
            {/* –ú–∞—Å—à—Ç–∞–± –≤ —Å—Ç–∏–ª–µ –∫–Ω–æ–ø–∫–∏ */}
            <div className="flex items-center">
              <select
                value={horizontalScale}
                onChange={(e) => setHorizontalScale(Number(e.target.value))}
                className="px-3 py-1 text-xs font-semibold rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: '#e0f2fe',
                  color: '#0c4a6e',
                  borderColor: '#7dd3fc',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  cursor: 'pointer'
                }}
                title="–ú–∞—Å—à—Ç–∞–± –¥–∏–∞–≥—Ä–∞–º–º—ã"
              >
                <option value={0.5}>–ú–∞—Å—à—Ç–∞–± 50%</option>
                <option value={1}>–ú–∞—Å—à—Ç–∞–± 100%</option>
                <option value={1.5}>–ú–∞—Å—à—Ç–∞–± 150%</option>
                <option value={2}>–ú–∞—Å—à—Ç–∞–± 200%</option>
              </select>
            </div>
          </div>
        </div>
        
        {error && (
          <div className="mt-1 p-2 rounded text-xs" style={{
            background: 'linear-gradient(135deg, #fee2e2 0%, #fecaca 100%)',
            color: '#dc2626',
            border: '1px solid #fca5a5',
            boxShadow: '0 1px 2px rgba(220, 38, 38, 0.1)'
          }}>
            {error}
          </div>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex-1 flex flex-col min-h-0">
          {/* –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ */}
          <div 
            className="overflow-auto border-b"
            style={{ 
              height: `calc(100vh - 120px - ${basementHeight}px)`,
              minHeight: '200px'
            }}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π */}
            <div className="flex-none border-b flex z-30" style={{
              background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
              borderBottomColor: '#cbd5e1',
              boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
              height: `${laneH}px`,
              boxSizing: 'border-box'
            }}>
              {/* –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–æ–≤ */}
              <div className="flex-none flex" style={{ 
                width: `${TOTAL_DRIVERS_WIDTH}px`,
                borderRight: '1px solid #e5e7eb'
              }}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∞–±–æ—Ç–Ω–∏–∫" */}
                <div 
                  className="flex-none px-2 py-1 flex items-center justify-center"
                  style={{ 
                    width: `${DRIVER_INFO_WIDTH}px`, 
                    height: '100%',
                    borderRight: '1px solid #cbd5e1',
                    background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.1), inset -1px 0 3px rgba(0,0,0,0.05)',
                    boxSizing: 'border-box'
                  }}
                >
                  <div className="text-xs font-semibold" style={{ 
                    color: '#475569'
                  }}>
                    –†–∞–±–æ—Ç–Ω–∏–∫
                  </div>
                </div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ê–≤—Ç–æ–ª–∏—Ñ—Ç" */}
                <div 
                  className="flex-none px-2 py-1 flex items-center justify-center"
                  style={{ 
                    width: `${MACHINE_SELECT_WIDTH}px`, 
                    height: '100%',
                    borderRight: '1px solid #cbd5e1',
                    background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.1), inset -1px 0 3px rgba(0,0,0,0.05)',
                    boxSizing: 'border-box'
                  }}
                >
                  <div className="text-xs font-semibold" style={{ 
                    color: '#475569'
                  }}>
                    –ê–≤—Ç–æ–ª–∏—Ñ—Ç
                  </div>
                </div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–í—Ä–µ–º—è —Å–º–µ–Ω—ã" */}
                <div 
                  className="flex-none px-2 py-1 flex items-center justify-center"
                  style={{ 
                    width: `${SHIFT_TIME_WIDTH}px`, 
                    height: '100%',
                    borderRight: '1px solid #cbd5e1',
                    background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.1), inset -1px 0 3px rgba(0,0,0,0.05)',
                    boxSizing: 'border-box'
                  }}
                >
                  <div className="text-xs font-semibold" style={{ 
                    color: '#475569'
                  }}>
                    –í—Ä–µ–º—è —Å–º–µ–Ω—ã
                  </div>
                </div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" */}
                <div 
                  className="flex-none px-2 py-1 flex items-center justify-center"
                  style={{ 
                    width: `${WORK_DURATION_WIDTH}px`, 
                    height: '100%',
                    background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.1), inset -1px 0 3px rgba(0,0,0,0.05)',
                    boxSizing: 'border-box'
                  }}
                >
                  <div className="text-xs font-semibold" style={{ 
                    color: '#475569'
                  }}>
                    Œît
                  </div>
                </div>
              </div>
              
              {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Å –ø—Ä—è–º—ã–º —Å–∫—Ä–æ–ª–ª–æ–º */}
              <div 
                ref={footRef}
                className="flex-1 overflow-x-auto overflow-y-hidden"
                style={{ height: `${laneH}px`, boxSizing: 'border-box' }}
              >
                <div style={{ 
                  position: 'relative', 
                  width: totalWidth,
                  minWidth: totalWidth,
                  height: '100%',
                  background: 'linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%)',
                  boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.1)'
                }}>
                    {gridLines.map(minutes => {
                      const isHour = minutes % 60 === 0;
                      const isMidnight = minutes === 0 || minutes === 24 * 60;
                      
                      return (
                        <div
                          key={minutes}
                          style={{
                            position: 'absolute',
                            left: (minutes - DAY_START) * pxPerMin,
                            top: 0,
                            bottom: 0,
                            width: isMidnight ? '3px' : '1px',
                            backgroundColor: isMidnight ? '#3b82f6' : isHour ? '#64748b' : '#cbd5e1',
                            display: 'flex',
                            alignItems: 'flex-end',
                            justifyContent: 'center',
                            paddingBottom: '2px',
                            boxShadow: isMidnight ? '0 0 4px rgba(59,130,246,0.5)' : isHour ? '0 0 2px rgba(100,116,139,0.3)' : 'none',
                            zIndex: isMidnight ? 5 : 1
                          }}
                        >
                          {isHour && (
                            <span style={{
                              fontSize: '7px',
                              color: isMidnight ? '#1d4ed8' : '#475569',
                              backgroundColor: 'rgba(255,255,255,0.9)',
                              padding: '1px 3px',
                              borderRadius: '2px',
                              border: `1px solid ${isMidnight ? '#3b82f6' : '#cbd5e1'}`,
                              fontWeight: isMidnight ? '700' : '500',
                              textShadow: '0 1px 1px rgba(255,255,255,0.8)',
                              boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
                              whiteSpace: 'nowrap'
                            }}>
                              {toHHMM(minutes)}
                            </span>
                          )}
                        </div>
                      );
                    })}
                    
                    {/* –õ–∏–Ω–∏—è "—Å–µ–π—á–∞—Å" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */}
                    <div
                      style={{
                        position: 'absolute',
                        left: nowLeft,
                        top: 0,
                        bottom: 0,
                        width: '2px',
                        background: 'linear-gradient(180deg, #ef4444 0%, #dc2626 100%)',
                        zIndex: 10,
                        boxShadow: '0 0 8px rgba(239,68,68,0.6), 0 0 4px rgba(239,68,68,0.8)'
                      }}
                    />
                  </div>
                </div>
            </div>
            
            {/* –û–±–ª–∞—Å—Ç—å —Å –º–∞—à–∏–Ω–∞–º–∏ –∏ —Ä–µ–π—Å–∞–º–∏ */}
            <div className="flex-1 overflow-y-auto" style={{ maxHeight: 'calc(100vh - 200px)' }}>
              <div className="flex" style={{ minHeight: '100%' }}>
              {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –º–∞—à–∏–Ω–∞–º–∏ */}
              <div 
                ref={driversRef}
                className="flex-none bg-white sticky left-0 z-10"
                style={{ 
                  width: `${TOTAL_DRIVERS_WIDTH}px`, 
                  borderRight: '1px solid #e5e7eb',
                  boxShadow: '2px 0 8px rgba(0,0,0,0.1)'
                }}
              >
                {drivers.map((driver, index) => {
                  const hasOvertime = checkDriverOvertime(driver.id);
                  const machine = driver.machineId && driver.machineId !== '' ? machines.find(m => m.id === driver.machineId) : null;
                  const layerCount = getLayerCountForDriver(driver.id);
                  const flightHeight = laneH - 12;
                  const layerSpacing = flightHeight + 6;
                  const dynamicLaneH = layerCount === 1 ? laneH : Math.max(laneH, layerCount * layerSpacing + 12);
                  
                  return (
                    <div key={driver.id} className="border-b border-gray-200 flex" style={{ height: dynamicLaneH, boxSizing: 'border-box' }}>
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ */}
                      <div 
                        className={`flex-none px-2 py-1 ${hasOvertime ? 'bg-red-100' : 'bg-white'} flex flex-col justify-center`} 
                        style={{ 
                          width: `${DRIVER_INFO_WIDTH}px`, 
                          borderRight: '1px solid #e5e7eb',
                          boxSizing: 'border-box'
                        }}
                      >
                        {/* –ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ */}
                        <div style={{ 
                          fontSize: '11px', 
                          fontWeight: '600', 
                          color: '#111827',
                          lineHeight: '1.2',
                          marginBottom: '2px'
                        }}>
                          {formatDriverName(driver.full_name)}
                        </div>
                        
                        {/* –í—Ä–µ–º—è —Å–º–µ–Ω—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏) */}
                        <div style={{ 
                          fontSize: '9px', 
                          color: '#6b7280',
                          lineHeight: '1.2'
                        }}>
                          {(() => {
                            const driverWithShift = driversWithShifts.find(d => d.id === driver.id);
                            if (driverWithShift && driverWithShift.shift_start && driverWithShift.shift_end) {
                              return `${driverWithShift.shift_start} - ${driverWithShift.shift_end}`;
                            }
                            return `${toHHMM(driver.shift_start)} - ${toHHMM(driver.shift_end)}`;
                          })()}
                        </div>
                      </div>
                      
                      {/* –ü–∞–Ω–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã */}
                      <div 
                        className={`flex-none px-2 py-1 bg-white flex flex-col justify-center`} 
                        style={{ 
                          width: `${MACHINE_SELECT_WIDTH}px`,
                          borderRight: '1px solid #e5e7eb',
                          boxSizing: 'border-box'
                        }}
                      >
                        <select
                          value={driver.machineId || ''}
                          onChange={(e) => handleDriverMachineChange(driver.id, e.target.value)}
                          className="w-full text-xs border border-gray-300 rounded px-2 py-1 bg-white mb-1"
                          style={{ fontSize: '10px' }}
                        >
                          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É</option>
                          {machines.map(machine => (
                            <option key={machine.id} value={machine.id}>
                              {machine.name}
                            </option>
                          ))}
                        </select>
                        
                        {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å */}
                        <div style={{ fontSize: '9px', color: '#6b7280', lineHeight: '1.2' }}>
                          {driver.machineId && driver.machineId !== '' 
                            ? machines.find(m => m.id === driver.machineId)?.name || '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                            : '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
                          }
                        </div>
                        
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
                        <div className="text-xs text-gray-400" style={{ fontSize: '8px', lineHeight: '1.2' }}>
                          ‚ÑπÔ∏è –ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—à–∏–Ω—É
                        </div>
                      </div>
                      
                      {/* –ö–æ–ª–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã */}
                      <div 
                        className="flex-none bg-white flex flex-col justify-center items-center gap-1" 
                        style={{ 
                          width: `${SHIFT_TIME_WIDTH}px`,
                          borderRight: '1px solid #e5e7eb',
                          boxSizing: 'border-box',
                          padding: '1px 2px'
                        }}
                      >
                        {/* –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã */}
                        <input
                          type="time"
                          value={toHHMM(getDriverShiftTime(driver.id).shiftStart)}
                          onChange={(e) => {
                            const [hours, minutes] = e.target.value.split(':').map(Number);
                            updateDriverShiftTime(driver.id, 'shiftStart', hours * 60 + minutes);
                          }}
                          className="text-xs border border-gray-300 rounded bg-white"
                          style={{ 
                            fontSize: '9px', 
                            height: '16px', 
                            width: '65px',
                            padding: '1px 3px',
                            textAlign: 'center'
                          }}
                        />
                        
                        {/* –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã */}
                        <input
                          type="time"
                          value={toHHMM(getDriverShiftTime(driver.id).shiftEnd)}
                          onChange={(e) => {
                            const [hours, minutes] = e.target.value.split(':').map(Number);
                            updateDriverShiftTime(driver.id, 'shiftEnd', hours * 60 + minutes);
                          }}
                          className="text-xs border border-gray-300 rounded bg-white"
                          style={{ 
                            fontSize: '9px', 
                            height: '16px', 
                            width: '65px',
                            padding: '1px 3px',
                            textAlign: 'center'
                          }}
                        />
                      </div>
                      
                      {/* –ö–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã */}
                      <div 
                        className="flex-none px-1 py-1 bg-gray-50 flex items-center justify-center" 
                        style={{ 
                          width: `${WORK_DURATION_WIDTH}px`,
                          boxSizing: 'border-box'
                        }}
                      >
                        <div className="text-center">
                          <div style={{ 
                            fontSize: '11px', 
                            fontWeight: '600', 
                            color: '#374151',
                            lineHeight: '1.2'
                          }}>
                            {(() => {
                              const shiftTime = getDriverShiftTime(driver.id);
                              return calculateShiftDuration(shiftTime.shiftStart, shiftTime.shiftEnd);
                            })()}
                          </div>
                          <div style={{ 
                            fontSize: '8px', 
                            color: '#6b7280',
                            lineHeight: '1.2'
                          }}>
                            —á–∞—Å–æ–≤
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
              
              {/* –û–±–ª–∞—Å—Ç—å —Å —Ä–µ–π—Å–∞–º–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º */}
              <div 
                ref={mainRef}
                className="flex-1 bg-gray-50 overflow-x-auto overflow-y-auto"
                style={{ boxShadow: 'inset 2px 0 8px rgba(0,0,0,0.05)' }}
              >
                <div style={{ width: totalWidth, minWidth: totalWidth, minHeight: '100%' }}>
                  {drivers.map((driver, index) => {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –ø–æ –µ–≥–æ ID (vehicleId = driverId)
                    const driverFlights = flightsByMachine[driver.id] || [];
                    // –û—Å—Ç–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –µ—ë –¥–ª—è —Ä–µ–π—Å–æ–≤
                    const machine = driver.machineId && driver.machineId !== '' ? machines.find(m => m.id === driver.machineId) : null;
                    const layerCount = machine ? getLayerCount(machine.id) : getLayerCountForDriver(driver.id);
                    const flightHeight = laneH - 12;
                    const layerSpacing = flightHeight + 6;
                    const dynamicLaneH = layerCount === 1 ? laneH : Math.max(laneH, layerCount * layerSpacing + 12);
                    
                    return (
                      <div key={driver.id} className="border-b border-gray-200" style={{ height: dynamicLaneH, boxSizing: 'border-box' }}>
                        <div style={{ position: 'relative', width: totalWidth, minWidth: totalWidth, height: '100%', boxSizing: 'border-box' }}>
                          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ */}
                          {gridLines.map(minutes => {
                            const isHour = minutes % 60 === 0;
                            const isMidnight = minutes === 0 || minutes === 24 * 60;
                            
                            return (
                              <div
                                key={minutes}
                                style={{
                                  position: 'absolute',
                                  left: (minutes - DAY_START) * pxPerMin,
                                  top: 0,
                                  bottom: 0,
                                  width: isMidnight ? '3px' : '1px',
                                  backgroundColor: isMidnight ? '#3b82f6' : isHour ? '#9ca3af' : '#e5e7eb',
                                  opacity: isMidnight ? 0.8 : 0.7,
                                  zIndex: isMidnight ? 5 : 1
                                }}
                              />
                            );
                          })}
                          
                          {/* –°–º–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–Ω–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è */}
                          {(() => {
                            const shiftTime = getDriverShiftTime(driver.id);
                            const shiftStart = shiftTime.shiftStart;
                            const shiftEnd = shiftTime.shiftEnd;
                            
                            // –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ
                            if (shiftEnd > shiftStart) {
                              return (
                                <div
                                  style={{
                                    position: 'absolute',
                                    left: Math.max(0, (shiftStart - DAY_START) * pxPerMin),
                                    top: 0,
                                    width: (shiftEnd - shiftStart) * pxPerMin,
                                    height: '100%',
                                    backgroundColor: '#87ceeb', // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
                                    opacity: 0.15,
                                    borderRadius: '2px',
                                    zIndex: 1
                                  }}
                                />
                              );
                            } else {
                              // –°–º–µ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–≤–∞ –±–ª–æ–∫–∞
                              const endOfDay = 24 * 60; // 24:00 –≤ –º–∏–Ω—É—Ç–∞—Ö
                              const startOfNextDay = 0; // 0:00 –≤ –º–∏–Ω—É—Ç–∞—Ö
                              const actualShiftEnd = shiftEnd - 24 * 60; // –£–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ 24 —á–∞—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                              
                              return (
                                <>
                                  {/* –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–º–µ–Ω—ã (–¥–æ –ø–æ–ª—É–Ω–æ—á–∏) */}
                                  {shiftStart < endOfDay && (
                                    <div
                                      style={{
                                        position: 'absolute',
                                        left: Math.max(0, (shiftStart - DAY_START) * pxPerMin),
                                        top: 0,
                                        width: (Math.min(endOfDay, actualDayEnd) - shiftStart) * pxPerMin,
                                        height: '100%',
                                        backgroundColor: '#87ceeb',
                                        opacity: 0.15,
                                        borderRadius: '2px',
                                        zIndex: 1
                                      }}
                                    />
                                  )}
                                  
                                  {/* –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–º–µ–Ω—ã (–ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏) */}
                                  {actualShiftEnd > DAY_START && (
                                    <div
                                      style={{
                                        position: 'absolute',
                                        left: Math.max(0, (DAY_START - DAY_START) * pxPerMin),
                                        top: 0,
                                        width: (actualShiftEnd - DAY_START) * pxPerMin,
                                        height: '100%',
                                        backgroundColor: '#87ceeb',
                                        opacity: 0.15,
                                        borderRadius: '2px',
                                        zIndex: 1
                                      }}
                                    />
                                  )}
                                </>
                              );
                            }
                          })()}
                          
                          {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∑–æ—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ */}
                          {timeGapInfo && timeGapInfo.machineId === machine?.id && activeFlight && (
                            <>
                              {/* –ó–∞–∑–æ—Ä —Å–ª–µ–≤–∞ –æ—Ç —Ä–µ–π—Å–∞ (–æ—Ç –Ω–∞—á–∞–ª–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è) */}
                              {timeGapInfo.beforeGap && (
                                <div
                                  style={{
                                    position: 'absolute',
                                    left: (timeGapInfo.beforeGap.insertTime - DAY_START) * pxPerMin,
                                    top: '50%',
                                    transform: 'translateY(-50%)',
                                    width: Math.max(30, timeGapInfo.beforeGap.gap * pxPerMin),
                                    height: 10,
                                    backgroundColor: timeGapInfo.beforeGap.gap < 25 
                                      ? 'rgba(239, 68, 68, 0.15)' // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ < 25 –º–∏–Ω (–±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
                                      : 'rgba(107, 114, 128, 0.15)', // –°–µ—Ä—ã–π –µ—Å–ª–∏ >= 25 –º–∏–Ω (–±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
                                    border: timeGapInfo.beforeGap.gap < 25 
                                      ? '1px dashed #ef4444' 
                                      : '1px dashed #6b7280',
                                    borderRadius: '3px',
                                    zIndex: 15,
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    fontSize: '8px',
                                    color: timeGapInfo.beforeGap.gap < 25 ? '#dc2626' : '#374151',
                                    fontWeight: '500'
                                  }}
                                >
                                  {Math.floor(timeGapInfo.beforeGap.gap)}–º–∏–Ω
                                </div>
                              )}
                              
                              {/* –ó–∞–∑–æ—Ä —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ä–µ–π—Å–∞ (–æ—Ç –∫–æ–Ω—Ü–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è) */}
                              {timeGapInfo.afterGap && (
                                <div
                                  style={{
                                    position: 'absolute',
                                    left: (timeGapInfo.afterGap.insertTime - DAY_START) * pxPerMin,
                                    top: '30%',
                                    transform: 'translateY(-50%)',
                                    width: Math.max(30, timeGapInfo.afterGap.gap * pxPerMin),
                                    height: 10,
                                    backgroundColor: timeGapInfo.afterGap.gap < 25 
                                      ? 'rgba(239, 68, 68, 0.15)' // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ < 25 –º–∏–Ω (–±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
                                      : 'rgba(107, 114, 128, 0.15)', // –°–µ—Ä—ã–π –µ—Å–ª–∏ >= 25 –º–∏–Ω (–±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
                                    border: timeGapInfo.afterGap.gap < 25 
                                      ? '1px dashed #ef4444' 
                                      : '1px dashed #6b7280',
                                    borderRadius: '3px',
                                    zIndex: 15,
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    fontSize: '8px',
                                    color: timeGapInfo.afterGap.gap < 25 ? '#dc2626' : '#374151',
                                    fontWeight: '500'
                                  }}
                                >
                                  {Math.floor(timeGapInfo.afterGap.gap)}–º–∏–Ω
                                </div>
                              )}
                            </>
                          )}
                          
                          <DroppableMachineSlot
                            machine={machine || {id: driver.id, name: '–í–æ–¥–∏—Ç–µ–ª—å', driver: driver.full_name, shiftStart: 0, shiftEnd: 1440}}
                            laneH={dynamicLaneH}
                            totalWidth={totalWidth}
                          >
                            {/* –ü–æ–ª–æ—Å–∫–∏ –¥–ª—è —Å–∫–æ–±–æ–∫-—Ü–µ–ø–æ—á–µ–∫ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ */}
                            {chainsByMachine[driver.id]?.map((chain, idx) => {
                              const xPos = (chain.start - DAY_START) * pxPerMin;
                              const xPosEnd = (chain.end - DAY_START) * pxPerMin;
                              const width = Math.max(4, xPosEnd - xPos);
                              const currentChainWindows = chainWindows[chain.chainId] || {};
                              
                              // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–ø–æ—á–∫–∏ –ø–æ —Å–ª–æ—è–º
                              const layerBounds = getChainLayerBounds(chain.chainId, driver.id);
                                
                                return (
                                  <div key={`chain-${driver.id}-${chain.chainId}-${idx}`}>
                                    {/* –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ø–æ–ª–æ—Å–∞ */}
                                    <div 
                                      className="absolute border-2 border-purple-500"
                                      style={{
                                        left: xPos,
                                        width: width,
                                        top: layerBounds.top, // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ª–æ—è
                                        height: layerBounds.height, // –í—ã—Å–æ—Ç–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª–æ–∏
                                        borderRadius: '4px',
                                        backgroundColor: selectedChain === chain.chainId 
                                          ? 'rgba(239, 68, 68, 0.2)' // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                                          : 'rgba(147, 51, 234, 0.1)', // –û–±—ã—á–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                                        border: selectedChain === chain.chainId 
                                          ? '2px solid #EF4444' // –ö—Ä–∞—Å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                                          : '2px solid #9333EA', // –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                                        zIndex: 1,
                                        cursor: 'pointer'
                                      }}
                                      onClick={() => handleChainClick(chain.chainId)}
                                      title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–æ–±–∫–∏, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–†–∞–∑–±–∏—Ç—å —Å–∫–æ–±–∫—É' –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                                    />
                                    
                                    {/* –û–∫–Ω–æ –ø–æ–≥—Ä—É–∑–∫–∏ - —Å–ª–µ–≤–∞ –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π –ø–æ–ª–æ—Å–µ */}
                                    <div 
                                      style={{
                                        position: 'absolute',
                                        left: xPos - 2, // –ù–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ –Ω–∞—á–∞–ª–∞ –ø–æ–ª–æ—Å—ã
                                        top: layerBounds.top + layerBounds.height / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ —Ü–µ–ø–æ—á–∫–∏
                                        transform: 'translateY(-50%)',
                                        height: 15, // –ú–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª–æ—Å—ã
                                        minWidth: '40px',
                                        backgroundColor: 'rgba(5, 150, 105, 0.7)', // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
                                        color: 'white',
                                        borderRadius: '3px',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        fontSize: '9px',
                                        fontWeight: '600',
                                        zIndex: 5,
                                        border: '1px solid rgba(4, 120, 87, 0.8)'
                                      }}
                                    >
                                      <select
                                        value={currentChainWindows.loadingWindow || ''}
                                        onChange={(e) => {
                                          const newValue = e.target.value ? Number(e.target.value) : undefined;
                                          setChainWindows(prev => ({
                                            ...prev,
                                            [chain.chainId]: {
                                              ...prev[chain.chainId],
                                              loadingWindow: newValue
                                            }
                                          }));
                                        }}
                                        style={{
                                          backgroundColor: 'transparent',
                                          border: 'none',
                                          color: 'white',
                                          fontSize: '9px',
                                          fontWeight: '600',
                                          outline: 'none',
                                          cursor: 'pointer',
                                          width: '100%',
                                          textAlign: 'center'
                                        }}
                                      >
                                        <option value="" style={{ color: '#000' }}>‚Äî</option>
                                        {Array.from({ length: 19 }, (_, i) => i + 1).map(num => (
                                          <option key={num} value={num} style={{ color: '#000' }}>{num}</option>
                                        ))}
                                      </select>
                                    </div>
                                    
                                    {/* –û–∫–Ω–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ - —Å–ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π –ø–æ–ª–æ—Å–µ */}
                                    <div 
                                      style={{
                                        position: 'absolute',
                                        left: xPos + width - 38, // –ù–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ –∫–æ–Ω—Ü–∞ –ø–æ–ª–æ—Å—ã (—à–∏—Ä–∏–Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ~40px)
                                        top: layerBounds.top + layerBounds.height / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ —Ü–µ–ø–æ—á–∫–∏
                                        transform: 'translateY(-50%)',
                                        height: 15, // –ú–µ–Ω—å—à–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª–æ—Å—ã
                                        minWidth: '40px',
                                        backgroundColor: 'rgba(220, 38, 38, 0.7)',
                                        color: 'white',
                                        borderRadius: '3px',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        fontSize: '9px',
                                        fontWeight: '600',
                                        zIndex: 5,
                                        border: '1px solid #B91C1C'
                                      }}
                                    >
                                      <select
                                        value={currentChainWindows.unloadingWindow || ''}
                                        onChange={(e) => {
                                          const newValue = e.target.value ? Number(e.target.value) : undefined;
                                          setChainWindows(prev => ({
                                            ...prev,
                                            [chain.chainId]: {
                                              ...prev[chain.chainId],
                                              unloadingWindow: newValue
                                            }
                                          }));
                                        }}
                                        style={{
                                          backgroundColor: 'transparent',
                                          border: 'none',
                                          color: 'white',
                                          fontSize: '9px',
                                          fontWeight: '600',
                                          outline: 'none',
                                          cursor: 'pointer',
                                          width: '100%',
                                          textAlign: 'center'
                                        }}
                                      >
                                        <option value="" style={{ color: '#000' }}>‚Äî</option>
                                        {[20, 21, 22, 23].map(num => (
                                          <option key={num} value={num} style={{ color: '#000' }}>{num}</option>
                                        ))}
                                      </select>
                                    </div>
                                    
                                    {/* –ù–æ–º–µ—Ä –∞–≤—Ç–æ–ª–∏—Ñ—Ç–∞ - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ–ª–æ—Å—ã */}
                                    {width > 100 && (() => {
                                      // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–ª–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω—ã
                                      const defaultAutolift = chainAutolifts[chain.chainId] || getAutoliftFromMachine(chain.machineId);
                                      
                                      // –ï—Å–ª–∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–∞–Ω–µ–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º
                                      if (!chainAutolifts[chain.chainId] && defaultAutolift) {
                                        autoAssignAutolift(chain.chainId, chain.machineId);
                                      }
                                      
                                      return (
                                        <select
                                          value={defaultAutolift}
                                          onChange={(e) => {
                                            const value = e.target.value;
                                            setChainAutolifts(prev => ({
                                              ...prev,
                                              [chain.chainId]: value
                                            }));
                                          }}
                                          style={{
                                            position: 'absolute',
                                            left: xPos + width / 2,
                                            top: '50%',
                                            transform: 'translate(-50%, -50%)',
                                            fontSize: '9px',
                                            color: selectedChain === chain.chainId ? '#DC2626' : '#8B5CF6',
                                            fontWeight: '600',
                                            backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                            border: `1px solid ${selectedChain === chain.chainId ? '#DC2626' : '#8B5CF6'}`,
                                            borderRadius: '3px',
                                            padding: '2px 4px',
                                            minWidth: '60px',
                                            maxWidth: '80px',
                                            textAlign: 'center',
                                            zIndex: 3,
                                            outline: 'none',
                                            cursor: 'pointer'
                                          }}
                                          onClick={(e) => e.stopPropagation()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–µ
                                        >
                                          <option value="" style={{ color: '#000' }}>‚Äî</option>
                                          {(autolifts.length > 0 ? autolifts : ['133', '135', '136', '139', '140', '141', '149', '150', '151']).map(autolift => (
                                            <option key={autolift} value={autolift} style={{ color: '#000' }}>
                                              {autolift}
                                            </option>
                                          ))}
                                        </select>
                                      );
                                    })()}
                                  </div>
                                );
                              })}
                              
                              {/* –†–µ–π—Å—ã */}
                              {driverFlights.map((flight, index) => {
                                const left = (flight.loadStart - DAY_START) * pxPerMin;
                                const width = Math.max(12, (flight.loadEnd - flight.loadStart) * pxPerMin);
                                const isPending = pendingChanges.some(c => c.flightId === flight.id);
                                const flightLayer = getFlightLayer(flight.id, driver.id);
                                const totalLayers = getLayerCountForDriver(driver.id);
                                
                                // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                                const flightHeight = laneH - 12; // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Ä–µ–π—Å–∞
                                let layerTop = 0;
                                
                                if (totalLayers === 1) {
                                  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª–æ–π, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–µ
                                  layerTop = 0; // –ë—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ CSS (top: 50%, transform: translateY(-50%))
                                } else {
                                  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ
                                  const layerSpacing = flightHeight + 4; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
                                  const totalHeight = totalLayers * layerSpacing;
                                  const centerY = dynamicLaneH / 2;
                                  const startY = centerY - totalHeight / 2;
                                  layerTop = startY + flightLayer * layerSpacing;
                                }
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–∫–æ–±–∫–µ (—Ü–µ–ø–æ—á–∫–µ)
                                const flightsInSameChain = driverFlights.filter(f => f.chainId === flight.chainId);
                                const indexInChain = flightsInSameChain.findIndex(f => f.id === flight.id);
                                const chainLength = flightsInSameChain.length;
                                
                                let bracketPosition: 'start' | 'middle' | 'end' | 'single' = 'single';
                                let showBracket = false;
                                
                                if (chainLength > 1 && flight.chainId && flight.chainId.trim() !== '') {
                                  showBracket = true;
                                  if (indexInChain === 0) {
                                    bracketPosition = 'start';
                                  } else if (indexInChain === chainLength - 1) {
                                    bracketPosition = 'end';
                                  } else {
                                    bracketPosition = 'middle';
                                  }
                                }
                                
                                // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–∞ –ø–æ–¥ —Ä–µ–π—Å–∞–º–∏ - –æ–Ω–∏ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫—Ä–∞—è—Ö —Å–∫–æ–±–æ–∫
                                let loadingWindow: number | undefined;
                                let unloadingWindow: number | undefined;
                                
                                return (
                                  <DraggableFlight
                                    key={flight.id}
                                    flight={flight}
                                    left={left}
                                    width={width}
                                    laneH={laneH - 6} // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø: –±—ã–ª–æ laneH-12, —Å—Ç–∞–ª–æ laneH-6 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
                                    fontPx={fontPx}
                                    isAssigned={true}
                                    isPending={isPending}
                                    status={getFlightStatus(flight)}
                                    showBracket={showBracket}
                                    bracketPosition={bracketPosition}
                                    loadingWindow={loadingWindow}
                                    unloadingWindow={unloadingWindow}
                                    onStatusChange={(status: 'completed' | 'in-progress' | 'planned') => updateFlightStatus(flight.flightNo, status)}
                                    onClick={handleFlightClick}
                                    isSelected={selectedFlights.has(flight.id)}
                                    layerTop={layerTop}
                                    useLayerPositioning={totalLayers > 1} // –í–∫–ª—é—á–∞–µ–º —Å–ª–æ–µ–≤–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ä–µ–π—Å–æ–≤
                                  />
                                );
                              })}
                            </DroppableMachineSlot>
                          
                          {/* –õ–∏–Ω–∏—è "—Å–µ–π—á–∞—Å" –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ */}
                          <div
                            style={{
                              position: 'absolute',
                              left: nowLeft,
                              top: 0,
                              height: '100%',
                              width: '2px',
                              backgroundColor: '#ef4444',
                              zIndex: 10
                            }}
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
              </div>
            </div>
          </div>

      </div>
      
      {/* –ü–∞–Ω–µ–ª—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ - —á–∞—Å—Ç—å flex layout */}
      <div 
        className="border-t-2 border-blue-300 bg-blue-50 flex-none"
        style={{ 
          height: `${basementHeight}px`,
          minHeight: '80px',
          maxHeight: '60vh',
          background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)',
          boxShadow: '0 -4px 8px rgba(0,0,0,0.1)',
          borderColor: '#cbd5e1'
        }}
      >
        {/* –•—ç–Ω–¥–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
        <div
          className="w-full bg-blue-400 cursor-ns-resize hover:bg-blue-500 transition-colors flex items-center justify-center"
          style={{ height: '6px' }}
          onMouseDown={(e) => {
            setIsResizing(true);
            const startY = e.clientY;
            const startHeight = basementHeight;
            
            const handleMouseMove = (e: MouseEvent) => {
              const deltaY = startY - e.clientY;
              const newHeight = Math.max(80, Math.min(400, startHeight + deltaY));
              setBasementHeight(newHeight);
            };
            
            const handleMouseUp = () => {
              setIsResizing(false);
              document.removeEventListener('mousemove', handleMouseMove);
              document.removeEventListener('mouseup', handleMouseUp);
            };
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
          }}
        >
          <div className="w-12 h-1 bg-blue-600 rounded-full opacity-60"></div>
        </div>
        
        <div className="flex" style={{ height: basementHeight - 6 }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥–≤–∞–ª–∞ */}
          <div 
            className="flex-none p-3 flex items-center"
            style={{ 
              width: `${TOTAL_DRIVERS_WIDTH}px`, 
              borderRight: '2px solid #cbd5e1',
              boxShadow: '2px 0 8px rgba(0,0,0,0.1)',
              background: 'linear-gradient(135deg, #e3eef7 0%, #d7e8f0 100%)'
            }}
          >
            <div className="text-sm font-semibold" style={{ color: '#475569' }}>
              –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã ({arrangeUnassignedFlights.length})
            </div>
          </div>
          
          {/* –û–±–ª–∞—Å—Ç—å —Å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–∞–º–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º */}
          <div 
            ref={basementRef}
            className="flex-1 overflow-x-auto overflow-y-auto"
            style={{ 
              boxShadow: 'inset 2px 0 8px rgba(0,0,0,0.05)',
              background: '#f9fafb'
            }}
          >
            <DroppableUnassigned
              totalWidth={totalWidth}
              height={arrangeUnassignedFlights.length > 0 
                ? Math.max(basementHeight - 6, (Math.max(...arrangeUnassignedFlights.map(f => f.laneIndex)) + 1) * laneH)
                : basementHeight - 6}
            >
              {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–≤–∞–ª–∞ */}
              {gridLines.map(minutes => {
                // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
                const maxLaneIndex = arrangeUnassignedFlights.length > 0 
                  ? Math.max(...arrangeUnassignedFlights.map(f => f.laneIndex)) 
                  : 0;
                const actualHeight = Math.max(basementHeight - 6, (maxLaneIndex + 1) * laneH);
                
                return (
                <div
                  key={`basement-grid-${minutes}`}
                  style={{
                    position: 'absolute',
                    left: (minutes - DAY_START) * pxPerMin,
                    top: 0,
                    height: actualHeight,
                    width: '1px',
                    backgroundColor: minutes % 60 === 0 ? '#9ca3af' : '#e5e7eb',
                    opacity: 0.7,
                    zIndex: 1
                  }}
                />
                );
              })}
              
              {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø–æ–¥–≤–∞–ª–∞ */}
              {(() => {
                // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—è–¥–æ–≤ —Å —Ä–µ–π—Å–∞–º–∏
                const maxLaneIndex = arrangeUnassignedFlights.length > 0 
                  ? Math.max(...arrangeUnassignedFlights.map(f => f.laneIndex)) 
                  : 0;
                const minLines = Math.floor((basementHeight - 6) / laneH) + 1;
                const actualLines = Math.max(minLines, maxLaneIndex + 2); // +2 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ —Å–Ω–∏–∑—É
                
                return Array.from({ length: actualLines }, (_, i) => (
                  <div
                    key={`basement-horizontal-${i}`}
                    style={{
                      position: 'absolute',
                      left: 0,
                      right: 0,
                      top: i * laneH,
                      height: '1px',
                      backgroundColor: '#e5e7eb',
                      opacity: 0.5,
                      zIndex: 1
                    }}
                  />
                ));
              })()}
              
              {/* –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã */}
              {arrangeUnassignedFlights.map((flight) => {
                const left = (flight.loadStart - DAY_START) * pxPerMin;
                const width = Math.max(12, (flight.loadEnd - flight.loadStart) * pxPerMin);
                const top = flight.laneIndex * laneH + (laneH - (laneH - 16)) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–π—Å –≤ —Å—Ç—Ä–æ–∫–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º–µ
                const isPending = pendingChanges.some(c => c.flightId === flight.id);
                
                return (
                  <div
                    key={flight.id}
                    style={{
                      position: 'absolute',
                      left: left,
                      top: top,
                      width: width,
                      height: laneH - 12 // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º–µ
                    }}
                  >
                    <DraggableFlight
                      flight={flight}
                      left={0}
                      width={width}
                      laneH={laneH - 6} // –¢–∞–∫–∞—è –∂–µ –≤—ã—Å–æ—Ç–∞ –∫–∞–∫ —É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å laneH-12)
                      fontPx={fontPx}
                      isAssigned={false}
                      isPending={isPending}
                      status={getFlightStatus(flight)}
                      onStatusChange={(status: 'completed' | 'in-progress' | 'planned') => updateFlightStatus(flight.flightNo, status)}
                      onClick={handleFlightClick}
                      isSelected={selectedFlights.has(flight.id)}
                    />
                  </div>
                );
              })}
              
              {/* –õ–∏–Ω–∏—è "—Å–µ–π—á–∞—Å" –¥–ª—è –ø–æ–¥–≤–∞–ª–∞ */}
              <div
                style={{
                  position: 'absolute',
                  left: nowLeft,
                  top: 0,
                  bottom: 0,
                  width: '2px',
                  backgroundColor: '#ef4444',
                  zIndex: 10
                }}
              />
            </DroppableUnassigned>
          </div>
        </div>
      </div>
      
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */}
      <div className="flex-none bg-white border-t border-gray-200 px-4 py-2">
        <div className="flex items-center gap-4">
          <div className="text-sm text-gray-600">
            –í—ã—Å–æ—Ç–∞ –ø–æ–¥–≤–∞–ª–∞: {basementHeight}px
          </div>
          <button
            onClick={() => setBasementHeight(120)}
            className="text-xs px-2 py-1 bg-gray-200 rounded hover:bg-gray-300"
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
        </div>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
      {showSaveDialog && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-[9999]"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 9999
          }}
        >
          <div className="bg-blue-50 rounded-lg shadow-2xl max-w-lg w-full mx-4 max-h-80 flex flex-col border-2 border-blue-300" 
               style={{ backgroundColor: '#f0f8ff' }}>
            <div className="px-4 py-3 border-b-2 border-blue-300 bg-gradient-to-r from-blue-100 to-blue-200 rounded-t-lg">
              <h3 className="text-sm font-semibold text-blue-900">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É
              </h3>
              <p className="text-xs text-blue-700 mt-1">
                –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
              </p>
            </div>
            
            <div className="flex-1 overflow-y-auto px-4 py-3" style={{ backgroundColor: '#f0f8ff' }}>
              {pendingChanges.length === 0 ? (
                <p className="text-blue-600 text-center py-6 text-sm">
                  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                </p>
              ) : (
                <div className="space-y-2">
                  {pendingChanges.map((change) => (
                    <div
                      key={change.id}
                      className="flex items-center justify-between bg-white rounded-md p-2 border border-blue-200 shadow-sm"
                      style={{ backgroundColor: '#ffffff', borderColor: '#b3d9ff' }}
                    >
                      <div className="flex-1">
                        <span className="text-sm font-medium text-blue-900">
                          {change.flightNo}: {change.fromMachine} ‚Üí {change.toMachine}
                        </span>
                      </div>
                      <button
                        onClick={() => handleRemoveChange(change.id)}
                        className="ml-2 px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200 border border-red-300 transition-colors"
                      >
                        –û—Ç–º–µ–Ω–∏—Ç—å
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="px-4 py-3 border-t-2 border-blue-300 flex justify-end gap-2 bg-gradient-to-r from-blue-100 to-blue-200 rounded-b-lg">
              <button
                onClick={handleCancelChanges}
                className="px-3 py-1.5 text-sm font-semibold rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: '#e0f2fe',
                  color: '#0c4a6e',
                  borderColor: '#7dd3fc',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleApplyChanges}
                disabled={loading || pendingChanges.length === 0}
                className="px-3 py-1.5 text-sm font-semibold rounded shadow-sm border transition-all duration-200"
                style={{
                  backgroundColor: loading || pendingChanges.length === 0 ? '#f1f5f9' : '#e0f2fe',
                  color: loading || pendingChanges.length === 0 ? '#64748b' : '#0c4a6e',
                  borderColor: loading || pendingChanges.length === 0 ? '#cbd5e1' : '#7dd3fc',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  cursor: loading || pendingChanges.length === 0 ? 'not-allowed' : 'pointer'
                }}
              >
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* DragOverlay –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      <DragOverlay modifiers={[restrictToVerticalAxis]}>
        {activeFlight && (
          <DraggableFlight
            flight={activeFlight}
            left={0}
            width={Math.max(12, (activeFlight.loadEnd - activeFlight.loadStart) * pxPerMin)}
            laneH={laneH}
            fontPx={fontPx}
            isAssigned={!!activeFlight.vehicleId}
            isPending={false}
            status={getFlightStatus(activeFlight)}
            onClick={handleFlightClick}
            isSelected={selectedFlights.has(activeFlight.id)}
          />
        )}
      </DragOverlay>
      </div>
    </DndContext>
  );
};

export default PlannerPage;
