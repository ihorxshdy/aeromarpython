#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Aeromar..."

PROJECT_DIR="/Users/igordvoretskii/Documents/aeromar-python"
LOGS_DIR="$PROJECT_DIR/logs"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
kill_process_safely() {
    local pid=$1
    local name=$2
    local timeout=${3:-10}
    
    if [ -z "$pid" ] || [ "$pid" = "" ]; then
        return 1
    fi
    
    if ! kill -0 "$pid" 2>/dev/null; then
        echo "   ‚è≠Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å $name (PID $pid) —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
    
    echo "   üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ $name (PID $pid)..."
    
    # –ü–æ–ø—ã—Ç–∫–∞ –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if kill -TERM "$pid" 2>/dev/null; then
        echo "   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è $name..."
        local count=0
        while [ $count -lt $timeout ] && kill -0 "$pid" 2>/dev/null; do
            sleep 1
            count=$((count + 1))
        done
        
        if kill -0 "$pid" 2>/dev/null; then
            echo "   ‚ö†Ô∏è  $name –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –º—è–≥–∫–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
            kill -KILL "$pid" 2>/dev/null
            sleep 2
            
            if kill -0 "$pid" 2>/dev/null; then
                echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å $name (PID $pid)"
                return 1
            else
                echo "   ‚úÖ $name –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
                return 0
            fi
        else
            echo "   ‚úÖ $name –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
            return 0
        fi
    else
        echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ü–µ—Å—Å—É $name (PID $pid)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
find_processes_by_pattern() {
    local pattern=$1
    local description=$2
    
    echo "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $description..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞
    local pids=$(ps aux | grep -E "$pattern" | grep -v grep | awk '{print $2}')
    
    if [ ! -z "$pids" ]; then
        echo "   –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã: $(echo $pids | tr '\n' ' ')"
        for pid in $pids; do
            if kill -0 "$pid" 2>/dev/null; then
                local cmd=$(ps -p $pid -o command= 2>/dev/null | head -c 80)
                kill_process_safely "$pid" "$description[$cmd...]" 15
            fi
        done
        return 0
    else
        echo "   ‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
}

echo "üîç –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ PID —Ñ–∞–π–ª–∞–º..."
if [ -d "$LOGS_DIR" ]; then
    for pid_file in "$LOGS_DIR"/*.pid; do
        if [ -f "$pid_file" ]; then
            pid=$(cat "$pid_file")
            service_name=$(basename "$pid_file" .pid)
            
            if kill_process_safely "$pid" "$service_name" 10; then
                echo "   ÔøΩÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ $pid_file"
                rm -f "$pid_file"
            fi
        fi
    done
else
    echo "   ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

echo ""

# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
find_processes_by_pattern "uvicorn.*main:app" "Uvicorn Backend"
find_processes_by_pattern "python.*main\.py" "Python Backend"
find_processes_by_pattern "python.*$PROJECT_DIR" "Python Project"
find_processes_by_pattern "node.*next" "Next.js Frontend"
find_processes_by_pattern "npm.*start" "NPM Start"
find_processes_by_pattern "yarn.*start" "Yarn Start"

echo ""
echo "üåê –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤..."

# –ú–∞—Å—Å–∏–≤ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
ports=(8000 3000 8080 5000)

for port in "${ports[@]}"; do
    port_pids=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$port_pids" ]; then
        echo "   üîç –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É $port: $port_pids"
        for pid in $port_pids; do
            if kill -0 "$pid" 2>/dev/null; then
                local cmd=$(ps -p $pid -o command= 2>/dev/null | head -c 50)
                kill_process_safely "$pid" "Port[$port:$cmd...]" 5
            fi
        done
    else
        echo "   ‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

echo ""
echo "üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."

# –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã
remaining_python=$(ps aux | grep -E "(python.*aeromar|uvicorn)" | grep -v grep | awk '{print $2}')
if [ ! -z "$remaining_python" ]; then
    echo "   üîç –ù–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Python –ø—Ä–æ—Ü–µ—Å—Å—ã: $remaining_python"
    for pid in $remaining_python; do
        kill_process_safely "$pid" "Remaining Python" 5
    done
fi

remaining_node=$(ps aux | grep -E "(node.*3000|npm.*start|yarn.*start)" | grep -v grep | awk '{print $2}')
if [ ! -z "$remaining_node" ]; then
    echo "   üîç –ù–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã: $remaining_node"
    for pid in $remaining_node; do
        kill_process_safely "$pid" "Remaining Node.js" 5
    done
fi

echo ""
echo "üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
sleep 3

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
final_issues=0
for port in 8000 3000; do
    final_check=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$final_check" ]; then
        echo "   ‚ùó –ü–æ—Ä—Ç $port –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç: $final_check"
        final_issues=1
    else
        echo "   ‚úÖ –ü–æ—Ä—Ç $port: —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
final_python=$(ps aux | grep -E "(python.*aeromar|uvicorn)" | grep -v grep | wc -l)
final_node=$(ps aux | grep -E "(node.*3000|npm.*start|yarn.*start)" | grep -v grep | wc -l)

if [ $final_python -gt 0 ]; then
    echo "   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Python –ø—Ä–æ—Ü–µ—Å—Å—ã: $final_python"
    final_issues=1
fi

if [ $final_node -gt 0 ]; then
    echo "   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã: $final_node"
    final_issues=1
fi

echo ""
if [ $final_issues -eq 0 ]; then
    echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    echo "   üåê –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
    echo "   üêç Python –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    echo "   üì¶ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
else
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–≥—É—Ç –µ—â–µ —Ä–∞–±–æ—Ç–∞—Ç—å"
    echo ""
    echo "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:"
    echo "   sudo lsof -ti:8000,3000 | xargs -r kill -9"
    echo "   sudo pkill -f 'python.*aeromar'"
    echo "   sudo pkill -f 'node.*3000'"
    echo ""
    echo "üîç –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ./check-status.sh"
fi

echo ""
echo "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:  ./check-status.sh"
echo "   üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:   ./start-network.sh"
echo "   üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:    tail -f logs/*.log"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
kill_process_safely() {
    local pid=$1
    local name=$2
    
    if kill -0 "$pid" 2>/dev/null; then
        echo "üî∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ $name (PID: $pid)"
        kill "$pid" 2>/dev/null
        sleep 3
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º
        if kill -0 "$pid" 2>/dev/null; then
            echo "   ‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞..."
            kill -9 "$pid" 2>/dev/null
            sleep 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if kill -0 "$pid" 2>/dev/null; then
            echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $name"
        else
            echo "   ‚úÖ $name –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    fi
}

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ PID —Ñ–∞–π–ª–∞–º
echo "üìã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ PID —Ñ–∞–π–ª–∞–º..."
for pid_file in "$LOGS_DIR"/*.pid; do
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        name=$(basename "$pid_file" .pid)
        kill_process_safely "$pid" "$name"
        rm "$pid_file"
    fi
done

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã –∏ —É–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."

# –ü–æ—Ä—Ç 8000 (Backend)
backend_pid=$(lsof -ti:8000 2>/dev/null)
if [ ! -z "$backend_pid" ]; then
    echo "üî∏ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 8000 (PID: $backend_pid), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    kill_process_safely "$backend_pid" "Backend-8000"
fi

# –ü–æ—Ä—Ç 3000 (Next.js)
nextjs_pid=$(lsof -ti:3000 2>/dev/null)
if [ ! -z "$nextjs_pid" ]; then
    echo "üî∏ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 3000 (PID: $nextjs_pid), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    kill_process_safely "$nextjs_pid" "NextJS-3000"
fi

# 3. –ü–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º
echo ""
echo "üêç –ü–æ–∏—Å–∫ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."

# –ò—â–µ–º Python –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
python_pids=$(ps aux | grep python | grep "$PROJECT_DIR" | grep -v grep | awk '{print $2}')
if [ ! -z "$python_pids" ]; then
    echo "üî∏ –ù–∞–π–¥–µ–Ω—ã Python –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–µ–∫—Ç–∞:"
    ps aux | grep python | grep "$PROJECT_DIR" | grep -v grep | awk '{print "   PID:", $2, "CMD:", $11, $12, $13}'
    
    for pid in $python_pids; do
        kill_process_safely "$pid" "Python-$pid"
    done
else
    echo "   ‚ÑπÔ∏è  Python –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# 4. –ü–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo ""
echo "üì¶ –ü–æ–∏—Å–∫ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."

# –ò—â–µ–º node –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
node_pids=$(ps aux | grep node | grep -E "(next|npm|yarn)" | grep -v grep | awk '{print $2}')
if [ ! -z "$node_pids" ]; then
    echo "üî∏ –ù–∞–π–¥–µ–Ω—ã Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux | grep node | grep -E "(next|npm|yarn)" | grep -v grep | awk '{print "   PID:", $2, "CMD:", $11, $12, $13}'
    
    for pid in $node_pids; do
        kill_process_safely "$pid" "Node-$pid"
    done
else
    echo "   ‚ÑπÔ∏è  Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ uvicorn –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo ""
echo "üöÄ –ü–æ–∏—Å–∫ uvicorn –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
uvicorn_pids=$(ps aux | grep uvicorn | grep -v grep | awk '{print $2}')
if [ ! -z "$uvicorn_pids" ]; then
    echo "üî∏ –ù–∞–π–¥–µ–Ω—ã uvicorn –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps aux | grep uvicorn | grep -v grep | awk '{print "   PID:", $2, "CMD:", $11, $12, $13}'
    
    for pid in $uvicorn_pids; do
        kill_process_safely "$pid" "Uvicorn-$pid"
    done
else
    echo "   ‚ÑπÔ∏è  Uvicorn –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi
echo ""
echo "ÔøΩ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
ports_to_check="3000 8000"
for port in $ports_to_check; do
    remaining_pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$remaining_pid" ]; then
        echo "‚ö†Ô∏è  –ù–∞ –ø–æ—Ä—Ç—É $port –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å PID: $remaining_pid"
        echo "   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º..."
        kill -9 "$remaining_pid" 2>/dev/null
    else
        echo "‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

echo ""
echo "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo "üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $LOGS_DIR"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo ""
echo "üìä –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏):"
echo "Python –ø—Ä–æ—Ü–µ—Å—Å—ã:"
ps aux | grep python | grep -v grep | wc -l | xargs echo "   –í—Å–µ–≥–æ:"
echo "Node –ø—Ä–æ—Ü–µ—Å—Å—ã:"
ps aux | grep node | grep -v grep | wc -l | xargs echo "   –í—Å–µ–≥–æ:"
echo "–ü–æ—Ä—Ç—ã 3000 –∏ 8000:"
if lsof -ti:3000 2>/dev/null || lsof -ti:8000 2>/dev/null; then
    echo "   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç—ã"
    lsof -ti:3000,8000 2>/dev/null | while read pid; do
        echo "   PID $pid –Ω–∞ –ø–æ—Ä—Ç—É $(lsof -p $pid 2>/dev/null | grep LISTEN | awk '{print $9}' | cut -d: -f2)"
    done
else
    echo "   ‚úÖ –ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
fi
