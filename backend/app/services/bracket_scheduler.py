"""
–ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–æ–±–æ–∫ —Å –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –ª–æ–≥–∏–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
from typing import List, Dict, Optional, Set, Any, Tuple
from ..models.flight import Flight, FlightType
from ..models.machine import Machine
from ..models.bracket import SMS_COMBINATIONS, DMS_BUSINESS_COMBINATIONS
from ..utils.time_utils import uid
from ..utils.constants import RULE
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class BracketScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–æ–±–æ–∫ —Å –ø–æ–ª–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π.
    –°–ª–µ–¥—É–µ—Ç 4-—Å—Ç—Ä–∞–Ω         if len(brackets) < 2:
            self.logger.info("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            return assignments, brackets
            
        self.logger.info(f"üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(brackets)} —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–æ–±–∫–∏
        for i, bracket in enumerate(brackets):
            driver_name = bracket.get('driver', {}).get('name', '–ù–ï–¢')
            self.logger.info(f"   –°–∫–æ–±–∫–∞ {i+1}: {bracket['startTime']//60:02d}:{bracket['startTime']%60:02d}-{bracket['endTime']//60:02d}:{bracket['endTime']%60:02d}, –≤–æ–¥–∏—Ç–µ–ª—å: {driver_name}")   self.logger.info(f"üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(brackets)} —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        sorted_brackets = sorted(brackets, key=lambda b: b["startTime"])
        used_bracket_ids = set()–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –æ—Ç STD,
    –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏.
    """
    
    def __init__(self, flights: List[Flight], machines: List[Machine], drivers: Optional[List[Any]] = None):
        self.flights = flights
        self.machines = machines
        self.drivers_list = drivers or []
        self.logger = logger

    def _fits_driver_shift(self, bracket_flights: List[Flight], driver: Dict) -> bool:
        """
        –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–º–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π,
        —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω—ã —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–∫–µ—Ç–æ–≤
        """
        return True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω—ã –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–∑–∂–µ

    def _find_best_driver_for_bracket(self, bracket_flights: List[Flight], available_drivers: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –±—Ä–µ–∫–µ—Ç–∞.
        –ü–æ—Å–∫–æ–ª—å–∫—É —Å–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ.
        """
        if not available_drivers or not bracket_flights:
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        return available_drivers[0] if available_drivers else None
        
    def plan_brackets(self) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ–±–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        flights = self.flights
        
        if not flights:
            return {"assignments": [], "brackets": [], "unassigned": []}
        
        self.logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {len(flights)} —Ä–µ–π—Å–æ–≤")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        assignments = []
        brackets = []
        unassigned_flights = []
        assigned_flight_ids = set()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Å—ã –ø–æ STD
        sorted_flights = sorted(flights, key=lambda f: f.stdMin)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–∞–º–æ–ª–µ—Ç–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        available_flights = {f.flightNo: f for f in sorted_flights}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = self._get_available_drivers()
        driver_index = 0
        
        self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ä–µ–π—Å–æ–≤
        su9_count = len([f for f in sorted_flights if f.acType == "SU9"])
        sms_count = len([f for f in sorted_flights if hasattr(f, 'type') and f.type.value == "SMS"])
        dms_count = len([f for f in sorted_flights if hasattr(f, 'type') and f.type.value == "DMS"])
        self.logger.info(f"üìà –†–µ–π—Å—ã –ø–æ —Ç–∏–ø–∞–º: SU9={su9_count}, SMS={sms_count}, DMS={dms_count}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–∫–æ–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
        # 1. SU9 x 5 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        su9_flights = [f for f in sorted_flights if f.acType == "SU9"]
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ 5 SU9 —Ä–µ–π—Å–æ–≤
        used_su9_indices = set()
        while len([i for i in range(len(su9_flights)) if i not in used_su9_indices]) >= 5 and driver_index < len(drivers):
            available_su9 = [su9_flights[i] for i in range(len(su9_flights)) if i not in used_su9_indices]
            
            if len(available_su9) >= 5:
                best_combination = None
                best_quality_score = float('inf')  # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                best_indices = None
                
                # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ 5 —Ä–µ–π—Å–æ–≤
                from itertools import combinations
                for combo_indices in combinations(range(len(available_su9)), 5):
                    candidate_flights = [available_su9[i] for i in combo_indices]
                    
                    if self._check_flight_intervals(candidate_flights):
                        quality_score = self._calculate_bracket_quality(candidate_flights)
                        
                        if quality_score < best_quality_score:
                            best_quality_score = quality_score
                            best_combination = candidate_flights
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                            real_indices = []
                            for flight in candidate_flights:
                                for orig_i, orig_flight in enumerate(su9_flights):
                                    if orig_flight.flightNo == flight.flightNo and orig_i not in used_su9_indices:
                                        real_indices.append(orig_i)
                                        break
                            best_indices = real_indices
                
                if best_combination and best_indices:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                    if driver_index < len(drivers):
                        best_driver = drivers[driver_index]
                        bracket = self._create_bracket_with_driver(best_combination, best_driver)
                        if bracket:
                            brackets.append(bracket)
                            for flight in best_combination:
                                assigned_flight_ids.add(flight.flightNo)
                                assignments.append({
                                    "flightNo": flight.flightNo,
                                    "driverId": best_driver["id"],
                                    "bracketId": bracket["id"],
                                    "serviceStart": flight.serviceStart,
                                    "serviceEnd": flight.serviceEnd
                                })
                            used_su9_indices.update(best_indices)
                            driver_index += 1
                        else:
                            break
                    else:
                        break
                else:
                    break
            else:
                break
        
        # 2. SMS 3-—Ä–µ–π—Å–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        sms_flights = [f for f in sorted_flights if f.flightNo not in assigned_flight_ids and f.type.value == "SMS"]
        driver_index = self._create_sms_combinations(sms_flights, drivers, driver_index, assignments, brackets, assigned_flight_ids)
        
        # 3. DMS+SMS –±–∏–∑–Ω–µ—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        remaining_flights = [f for f in sorted_flights if f.flightNo not in assigned_flight_ids]
        driver_index = self._create_dms_business_combinations(remaining_flights, drivers, driver_index, assignments, brackets, assigned_flight_ids)
        
        # 4. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
        if len(brackets) > 1:  # –ï—Å—Ç—å —Å–º—ã—Å–ª –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å–∫–æ–±–∫–∏
            self.logger.info(f"ÔøΩ –ü—ã—Ç–∞–µ–º—Å—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–∫–æ–±–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(brackets)} —Å–∫–æ–±–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ")
            assignments, brackets = self._combine_brackets_for_drivers(assignments, brackets, drivers)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏
        for flight in sorted_flights:
            if flight.flightNo not in assigned_flight_ids:
                unassigned_flights.append({
                    "flightNo": flight.flightNo,
                    "acType": flight.acType,
                    "std": f"{flight.stdMin // 60:02d}:{flight.stdMin % 60:02d}",
                    "flightType": flight.type.value
                })
        
        return {
            "assignments": assignments,
            "brackets": brackets,
            "unassigned": unassigned_flights
        }
    
    def _calculate_shift_start_time(self, bracket_start_time: int) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è.
        –°–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Ä–∞–Ω–µ–µ –Ω–∞—á–∞–ª–∞ —Å–∫–æ–±–∫–∏, –Ω–æ —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞—á–∞–ª–∞ —á–∞—Å–∞.
        
        Args:
            bracket_start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–∫–æ–±–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 00:00
            
        Returns:
            –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 00:00 (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—É—Ç–æ–∫)
        """
        from ..utils.constants import DAY_START
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å–∫–æ–±–∫–∏ –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        bracket_hours = bracket_start_time // 60
        bracket_minutes = bracket_start_time % 60
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω—É—Ç—ã, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å
        if bracket_minutes > 0:
            shift_start_hour = bracket_hours
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–æ–≤–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00), –±–µ—Ä–µ–º –Ω–∞ —á–∞—Å —Ä–∞–Ω—å—à–µ
            shift_start_hour = bracket_hours - 1
        
        # –í–º–µ—Å—Ç–æ –æ–±—Ä–µ–∑–∫–∏ –¥–æ 0, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º DAY_START
        shift_start_minutes = shift_start_hour * 60
        if shift_start_minutes < DAY_START:
            shift_start_minutes = DAY_START
            
        return shift_start_minutes

    def _get_available_drivers(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        if self.drivers_list:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            return [
                {
                    "id": driver.id,
                    "name": driver.full_name,
                    "available": True,
                    "shift_start": None,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                    "shift_end": None
                }
                for driver in self.drivers_list
            ]
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ–ª–±—ç–∫)
            return [
                {
                    "id": f"driver_{i+1}", 
                    "name": f"–í–æ–¥–∏—Ç–µ–ª—å {i+1}", 
                    "available": True,
                    "shift_start": None,
                    "shift_end": None
                }
                for i in range(20)  # 20 –≤–æ–¥–∏—Ç–µ–ª–µ–π
            ]
    
    def _create_bracket_with_driver(self, flights: List[Flight], driver: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫–æ–±–∫—É —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        if not flights:
            return None
        
        from ..utils.constants import RULE
        
        sorted_flights = sorted(flights, key=lambda f: f.stdMin)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–∫–æ–±–∫–∏
        first_flight = sorted_flights[0]
        last_flight = sorted_flights[-1]
        
        # –ù–∞—á–∞–ª–æ —Å–∫–æ–±–∫–∏: –∑–∞ LOAD_SMS/LOAD_DMS –º–∏–Ω—É—Ç –¥–æ STD –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–≥—Ä—É–∑–∫–∏
        if first_flight.type == "DMS":
            bracket_start = first_flight.stdMin - RULE.LOAD_DMS  # 180 –º–∏–Ω—É—Ç (3—á00–º–∏–Ω) –¥–æ STD –¥–ª—è –®–§
            flight_type = "DMS"
        else:  # SMS —Ä–µ–π—Å—ã
            bracket_start = first_flight.stdMin - RULE.LOAD_SMS  # 155 –º–∏–Ω—É—Ç (2—á35–º–∏–Ω) –¥–æ STD –¥–ª—è –£–§
            flight_type = "SMS"
        
        # –ö–æ–Ω–µ—Ü —Å–∫–æ–±–∫–∏: —á–µ—Ä–µ–∑ RETURN_UNLOAD –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Å–∞
        bracket_end = last_flight.serviceEnd + RULE.RETURN_UNLOAD  # +20 –º–∏–Ω—É—Ç
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
        shift_start = self._calculate_shift_start_time(bracket_start)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        driver_copy = driver.copy()
        driver_copy["shift_start"] = shift_start
        driver_copy["shift_end"] = bracket_end + 60  # –°–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —Å–∫–æ–±–∫–∏
        
        bracket = {
            "id": uid(),
            "driverId": driver_copy["id"],
            "driver": driver_copy,
            "flights": [f.flightNo for f in sorted_flights],
            "startTime": bracket_start,  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–∞
            "endTime": bracket_end,      # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–æ–±–∫–∏
            "shiftStart": shift_start,   # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
            "shiftEnd": driver_copy["shift_end"],  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
            "flightCount": len(flights),
            "bracketType": f"{len(flights)}-flight bracket",
            "firstFlightType": flight_type  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤—ã—à–µ —Ç–∏–ø
        }
        
        return bracket
    
    def _create_sms_combinations(self, sms_flights: List[Flight], drivers: List[Dict[str, Any]], 
                               driver_index: int, assignments: List[Dict[str, Any]], 
                               brackets: List[Dict[str, Any]], assigned_flight_ids: set) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ SMS –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∏—â—è —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–µ–π—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã
        remaining_sms = [f for f in sms_flights if f.flightNo not in assigned_flight_ids]
        
        while len(remaining_sms) >= 3 and driver_index < len(drivers):
            best_combination = None
            best_quality_score = float('inf')  # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ª—É—á—à–µ–µ)
            best_indices = None
            
            # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 3 —Ä–µ–π—Å–æ–≤
            for i in range(len(remaining_sms)):
                for j in range(i + 1, len(remaining_sms)):
                    for k in range(j + 1, len(remaining_sms)):
                        candidate_flights = [remaining_sms[i], remaining_sms[j], remaining_sms[k]]
                        
                        if self._check_flight_intervals(candidate_flights):
                            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                            quality_score = self._calculate_bracket_quality(candidate_flights)
                            
                            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π quality_score)
                            if quality_score < best_quality_score:
                                best_quality_score = quality_score
                                best_combination = candidate_flights
                                best_indices = [i, j, k]
            
            if best_combination:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                if driver_index < len(drivers):
                    best_driver = drivers[driver_index]
                    bracket = self._create_bracket_with_driver(best_combination, best_driver)
                    if bracket:
                        brackets.append(bracket)
                        for flight in best_combination:
                            assigned_flight_ids.add(flight.flightNo)
                            assignments.append({
                                "flightNo": flight.flightNo,
                                "driverId": best_driver["id"],
                                "bracketId": bracket["id"],
                                "serviceStart": flight.serviceStart,
                                "serviceEnd": flight.serviceEnd
                            })
                        
                        # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤)
                        if best_indices:
                            for idx in sorted(best_indices, reverse=True):
                                remaining_sms.pop(idx)
                        
                        driver_index += 1
                    
                    self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è SMS —Å–∫–æ–±–∫–∞ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {best_quality_score:.2f}")
                else:
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, –≤—ã—Ö–æ–¥–∏–º
                break
        
        return driver_index
    
    def _create_dms_business_combinations(self, remaining_flights: List[Flight], drivers: List[Dict[str, Any]],
                                        driver_index: int, assignments: List[Dict[str, Any]],
                                        brackets: List[Dict[str, Any]], assigned_flight_ids: Set[str]) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ DMS+SMS –±–∏–∑–Ω–µ—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∏—â—è –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—ã"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã
        dms_flights = [f for f in remaining_flights 
                      if hasattr(f, 'type') and f.type.value == "DMS" 
                      and f.flightNo not in assigned_flight_ids]
        sms_flights = [f for f in remaining_flights 
                      if hasattr(f, 'type') and f.type.value == "SMS" 
                      and f.flightNo not in assigned_flight_ids]
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã DMS+SMS
        used_dms = set()
        used_sms = set()
        
        while dms_flights and sms_flights and driver_index < len(drivers):
            best_pair = None
            best_time_gap = float('inf')
            
            # –ò—â–µ–º –ø–∞—Ä—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä—ã–≤–æ–º
            for dms_flight in dms_flights:
                if dms_flight.flightNo in used_dms:
                    continue
                    
                for sms_flight in sms_flights:
                    if sms_flight.flightNo in used_sms:
                        continue
                        
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
                    time_gap = abs(dms_flight.stdMin - sms_flight.stdMin)
                    
                    bracket_flights = [dms_flight, sms_flight]
                    if self._check_flight_intervals(bracket_flights) and time_gap < best_time_gap:
                        best_time_gap = time_gap
                        best_pair = (dms_flight, sms_flight)
            
            if best_pair:
                dms_flight, sms_flight = best_pair
                bracket_flights = [dms_flight, sms_flight]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                if driver_index < len(drivers):
                    best_driver = drivers[driver_index]
                    bracket = self._create_bracket_with_driver(bracket_flights, best_driver)
                    if bracket:
                        brackets.append(bracket)
                        for flight in bracket_flights:
                            assigned_flight_ids.add(flight.flightNo)
                            assignments.append({
                                "flightNo": flight.flightNo,
                                "driverId": best_driver["id"],
                                "bracketId": bracket["id"],
                                "serviceStart": flight.serviceStart,
                                "serviceEnd": flight.serviceEnd
                            })
                        
                        used_dms.add(dms_flight.flightNo)
                        used_sms.add(sms_flight.flightNo)
                        driver_index += 1
                        
                        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è DMS+SMS —Å–∫–æ–±–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä—ã–≤–æ–º {best_time_gap} –º–∏–Ω—É—Ç")
                    else:
                        break
                else:
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä, –≤—ã—Ö–æ–¥–∏–º
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
            dms_flights = [f for f in dms_flights if f.flightNo not in used_dms]
            sms_flights = [f for f in sms_flights if f.flightNo not in used_sms]
        
        return driver_index

    def _create_mock_autolifts(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–ª–∏—Ñ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return [
            {
                "id": "AL001",
                "type": "DMS",
                "capacity": 5,
                "available": True
            },
            {
                "id": "AL002", 
                "type": "SMS",
                "capacity": 3,
                "available": True
            }
        ]
    
    def _check_flight_intervals(self, flights: List[Flight]) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏
        —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–µ–∑–¥–∞ –º–µ–∂–¥—É –í–° –∏                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  g–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        """
        if len(flights) <= 1:
            return True
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ STD –≤—Ä–µ–º–µ–Ω–∏
        sorted_flights = sorted(flights, key=lambda f: f.stdMin)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–µ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
        time_span = sorted_flights[-1].stdMin - sorted_flights[0].stdMin
        if time_span > 240:  # 4 —á–∞—Å–∞ –º–∞–∫—Å–∏–º—É–º (–±—ã–ª–æ 6 —á–∞—Å–æ–≤)
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ä–µ–π—Å–∞–º–∏
        from ..utils.constants import RULE
        
        for i in range(len(sorted_flights) - 1):
            current_flight = sorted_flights[i]
            next_flight = sorted_flights[i + 1]
            
            # –í—Ä–µ–º—è –º–µ–∂–¥—É –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Å–∞ –∏ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
            interval = next_flight.serviceStart - current_flight.serviceEnd
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ constants.py
            MIN_TRANSFER_TIME = RULE.TRAVEL  # 25 –º–∏–Ω—É—Ç –Ω–∞ –ø–µ—Ä–µ–µ–∑–¥ –º–µ–∂–¥—É –±–æ—Ä—Ç–∞–º–∏
            MIN_INTERVAL = 18  # –º–∏–Ω–∏–º—É–º 18 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
            MAX_INTERVAL = 28  # –º–∞–∫—Å–∏–º—É–º 28 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if interval < MIN_INTERVAL:
                return False  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
                
            if interval > MAX_INTERVAL:
                return False  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, —Å–∫–æ–±–∫–∞ –Ω–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–µ–π—Å—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        for i in range(len(sorted_flights) - 1):
            current_end = sorted_flights[i].serviceEnd
            next_start = sorted_flights[i + 1].serviceStart
            if current_end > next_start:
                return False  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        
        return True
    
    def _calculate_bracket_quality(self, flights: List[Flight]) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–æ–±–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ).
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
        """
        if len(flights) <= 1:
            return 0.0
            
        sorted_flights = sorted(flights, key=lambda f: f.stdMin)
        
        # –û–±—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        time_span = sorted_flights[-1].stdMin - sorted_flights[0].stdMin
        
        # –°—É–º–º–∞ –ø—Ä–æ—Å—Ç–æ–µ–≤ –º–µ–∂–¥—É —Ä–µ–π—Å–∞–º–∏
        total_idle_time = 0
        for i in range(len(sorted_flights) - 1):
            current_flight = sorted_flights[i]
            next_flight = sorted_flights[i + 1]
            idle_time = next_flight.serviceStart - current_flight.serviceEnd
            total_idle_time += idle_time
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        total_service_time = sum(f.serviceEnd - f.serviceStart for f in flights)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –ª—É—á—à–µ)
        if time_span > 0:
            efficiency = total_service_time / time_span
        else:
            efficiency = 1.0
            
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        # –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ –±–æ–ª—å—à–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∑–∞ –±–æ–ª—å—à–∏–µ –ø—Ä–æ—Å—Ç–æ–∏
        quality_score = time_span * 0.7 + total_idle_time * 1.2 - efficiency * 100
        
        return quality_score
    
    def _create_bracket(self, flights: List[Flight], autolift: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫–æ–±–∫—É –∏–∑ —Ä–µ–π—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –ø–æ–≥—Ä—É–∑–∫–∏"""
        if not flights:
            return None
        
        from ..utils.constants import RULE
        
        sorted_flights = sorted(flights, key=lambda f: f.stdMin)
        first_flight = sorted_flights[0]
        last_flight = sorted_flights[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–∫–æ–±–∫–∏
        if first_flight.type == "DMS":
            bracket_start = first_flight.stdMin - RULE.LOAD_DMS  # 180 –º–∏–Ω—É—Ç (3—á00–º–∏–Ω) –¥–æ STD –¥–ª—è –®–§
            flight_type = "DMS"
        else:  # SMS —Ä–µ–π—Å—ã
            bracket_start = first_flight.stdMin - RULE.LOAD_SMS  # 155 –º–∏–Ω—É—Ç (2—á35–º–∏–Ω) –¥–æ STD –¥–ª—è –£–§
            flight_type = "SMS"
        
        # –ö–æ–Ω–µ—Ü —Å–∫–æ–±–∫–∏: —á–µ—Ä–µ–∑ RETURN_UNLOAD –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Å–∞
        bracket_end = last_flight.serviceEnd + RULE.RETURN_UNLOAD  # +20 –º–∏–Ω—É—Ç
        
        bracket = {
            "id": uid(),
            "machineId": autolift["id"],
            "flights": [f.flightNo for f in sorted_flights],
            "startTime": bracket_start,  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–ª–∏—Ñ—Ç–∞
            "endTime": bracket_end,      # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–æ–±–∫–∏
            "flightCount": len(flights),
            "bracketType": f"{len(flights)}-flight bracket",
            "firstFlightType": flight_type  # –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞
        }
        
        return bracket

    def _combine_brackets_for_drivers(self, assignments: List[Dict[str, Any]], 
                                     brackets: List[Dict[str, Any]], 
                                     drivers: List[Dict[str, Any]]) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        """
        if len(brackets) < 2:
            return assignments, brackets
            
        self.logger.info(f"ÔøΩ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(brackets)} —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        sorted_brackets = sorted(brackets, key=lambda b: b["startTime"])
        
        new_assignments = []
        new_brackets = []
        used_bracket_ids = set()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        combinations_found = 0
        for i in range(len(sorted_brackets)):
            if sorted_brackets[i]["id"] in used_bracket_ids:
                continue
                
            first_bracket = sorted_brackets[i]
            
            # –ò—â–µ–º –≤—Ç–æ—Ä—É—é —Å–∫–æ–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–º—É –∂–µ –≤–æ–¥–∏—Ç–µ–ª—é
            for j in range(i + 1, len(sorted_brackets)):
                if sorted_brackets[j]["id"] in used_bracket_ids:
                    continue
                    
                second_bracket = sorted_brackets[j]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–∏ —Å–∫–æ–±–∫–∏
                if self._can_combine_brackets(first_bracket, second_bracket):
                    combinations_found += 1
                    self.logger.info(f"üîó –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ #{combinations_found} –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
                    self.logger.info(f"   –ü–µ—Ä–≤–∞—è —Å–∫–æ–±–∫–∞: {first_bracket['startTime']//60:02d}:{first_bracket['startTime']%60:02d}-{first_bracket['endTime']//60:02d}:{first_bracket['endTime']%60:02d}")
                    self.logger.info(f"   –í—Ç–æ—Ä–∞—è —Å–∫–æ–±–∫–∞: {second_bracket['startTime']//60:02d}:{second_bracket['startTime']%60:02d}-{second_bracket['endTime']//60:02d}:{second_bracket['endTime']%60:02d}")
                    self.logger.info(f"   –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫: {second_bracket['startTime'] - first_bracket['endTime']} –º–∏–Ω—É—Ç")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≤—Ç–æ—Ä—É—é —Å–∫–æ–±–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
                    for bracket in brackets:
                        if bracket["id"] == second_bracket["id"]:
                            bracket["driverId"] = first_bracket["driverId"]
                            bracket["driver"] = first_bracket["driver"].copy()
                            self.logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Å–∫–æ–±–∫—É –≤–æ–¥–∏—Ç–µ–ª—é {first_bracket['driver']['name']}")
                            break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å–∫–æ–±–∫–∏
                    for assignment in assignments:
                        if assignment.get("bracketId") == second_bracket["id"]:
                            assignment["driverId"] = first_bracket["driverId"]
                    
                    # –û—Ç–º–µ—á–∞–µ–º —Å–∫–æ–±–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                    used_bracket_ids.add(first_bracket["id"])
                    used_bracket_ids.add(second_bracket["id"])
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ä—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
            if first_bracket["id"] not in used_bracket_ids:
                used_bracket_ids.add(first_bracket["id"])
        
        self.logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {combinations_found} –ø–∞—Ä —Å–æ–∑–¥–∞–Ω–æ")
        return assignments, brackets
    
    def _can_combine_brackets(self, first_bracket: Dict[str, Any], second_bracket: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        """
        first_end = first_bracket["endTime"]
        second_start_original = second_bracket["startTime"]
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–∫–æ–±–∫–∞–º–∏
        gap = second_start_original - first_end
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (20-60 –º–∏–Ω—É—Ç)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ 60 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏
        if 20 <= gap <= 60:
            return True
            
        return False
    

    

